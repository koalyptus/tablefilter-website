---
title: Dynamically populate external filters
heading: 'Dynamically populate external filters'
section: 'examples-advanced'
---

<h1>{{ heading }}</h1>

<p>
    This demo shows how to dynamically populate external filters by
    taking advantage of <code>TableFilter</code>'s API and events.
</p>

<style data-config>
  .year{
    padding: 1em;
  }
  .year label{
    margin-top: 0.2em;
    margin-right: 1em;
  }
</style>

<div class="navbar navbar-default" data-config>
  <form class="navbar-form navbar-left">
    <div class="form-group">
      <label for="extCountry">Country:</label>
      <select id="extCountry" name="extCountry" class="form-control"
        onchange="filterCountry(event);">
      </select>
    </div>
    <div class="form-group year">
      <label>Year:</label>
      <span id="extYear"></span>
    </div>
  </form>
</div>

{{> countries-table-tiny }}

{{> tablefilter-script }}

<script data-config>
    // TableFilter settings
    var tfConfig = {
        base_path: 'tablefilter/',
        col_0: 'select',
        col_2: 'checklist',
        popup_filters: true,
        alternate_rows: true,
        mark_active_columns: true,
        rows_counter: true,
        btn_reset: true,
        loader: true,
        col_widths: [
          '150px', '75', '100px',
          null, null, null,
          null, null, null
        ]
    };

    // Instantiate TableFilter
    var tf = new TableFilter('demo', tfConfig);

    // Subscribe to a custom event triggered when a select or checklist filter is populated
    tf.emitter.on(['after-populating-filter'], populateExternalFilters);

    // Subscribe to a custom event fired after the table is filtered
    tf.emitter.on(['after-filtering'], syncExternalFilters);

    // Ininialiaze TableFilter instance
    tf.init();

    // Populate external filters callback
    function populateExternalFilters(tf, colIndex, filter){
      if(colIndex === 0){
        populateCountryFilter(tf, colIndex);
      }
      if(colIndex === 2){
        populateYearFilter(tf, colIndex, filter);
      }
    }

    // Populate the external country filter using the dropdown feature API
    function populateCountryFilter(tf, colIndex){
      var extCountry = document.querySelector('#extCountry');
      var feature = tf.feature('dropdown');

      // Populate any given select filter for a specified column
      feature.addOptions(colIndex, extCountry);
    }

    // Populate the external year checkbox filters
    function populateYearFilter(tf, colIndex, filter){
      var extYear = document.querySelector('#extYear');

      // iterate all options and generate checkboxes with associated labels
      // TODO: provide an API to easily get all the checklist options
      [].forEach.call(filter.querySelectorAll('input'), function(input, idx){
        if(idx > 0) {
          // clone the existing input inside a checklist option and modify its attributes
          var cbx = input.cloneNode(true);
          cbx.name = 'extCbxYear';
          cbx.className = 'extCbxYear';
          cbx.removeAttribute('id');

          // create the corresponding label with its value
          var label = document.createElement('label');

          // append the newly cloned checkbox into label
          label.appendChild(cbx);
          label.appendChild(document.createTextNode(cbx.value));
          // append the label into the filter container
          extYear.appendChild(label);

          // add a click event handler to the checkbox
          cbx.addEventListener('click', filterYear);
        }
      });
    }

    // Sync the external filters when the default table filters are used
    function syncExternalFilters(tf, searchTerms){
      // sync the external country filter
      var extCountry = document.querySelector('#extCountry');
      extCountry.value = searchTerms[0];

      // sync the external year checkboxes
      var selectedYears = searchTerms[2];
      var extYearCheckboxes = document.querySelectorAll('.extCbxYear');
      [].forEach.call(extYearCheckboxes, function(input){
          input.checked = false;
          if(selectedYears.indexOf(input.value) !== -1){
            input.checked = true;
          }
      });
    }

    // External country filter onchange handler
    function filterCountry(evt){
      var extCountry = evt.target;

      // set corresponding filter value and filter the table
      tf.setFilterValue(0, extCountry.value);
      tf.filter();
    }

    // External year filter click handler
    function filterYear(evt){
      var values = [];
      var checkedOptions = document.querySelectorAll('.extCbxYear:checked');

      // extract values of selected checkboxes
      [].forEach.call(checkedOptions, function(input){
        values.push(input.value);
      });

      // set corresponding filter value and filter the table
      tf.setFilterValue(2, values);
      tf.filter();
    }
</script>

{{> code-tabs }}
