---
title: Toggle features
heading: 'Toggle features'
section: 'examples-api'
---

<h1>{{ heading }}</h1>

<p>
    <code>TableFilter</code> exposes an exhaustive API allowing to perform most
    of the actions in a programmatic manner. This example show how to filter
    the table programmatically with a custom form and how to toggle the features
    enabled by the configuration object.
</p>

<div data-config>
  <div class="navbar navbar-default">
      <form class="navbar-form navbar-left" onsubmit="filter(event);">
          <div class="form-group">
              <label for="slcColumns">Column:</label>
              <select id="slcColumns" name="slcColumns" class="form-control">
                  <option value="0">Country</option>
                  <option value="1">ISO</option>
                  <option value="2">Year</option>
                  <option value="3">POP</option>
                  <option value="4">XRAT</option>
                  <option value="5">PPP</option>
                  <option value="6">cgdp</option>
                  <option value="7">cc</option>
                  <option value="8">ci</option>
              </select>
              <input name="inpSearch" type="text"
                  class="form-control" placeholder="Search">

              <button type="submit" class="btn btn-default">Filter</button>
              <button type="reset" class="btn btn-link"
                  onclick="tf.clearFilters();">Clear</button>
          </div>
      </form>

      <div class="navbar-form navbar-left">
          <label for="chxPager">Pagination:</label>
          <input id="chxPager" type="checkbox" checked class="form-control"
              onclick="togglePagination(event);">
      </div>

      <div class="navbar-form navbar-left">
          <label for="chxAlternate">Alternating rows:</label>
          <input id="chxAlternate" type="checkbox" checked class="form-control"
              onclick="toggleAlternatingRows(event);">
      </div>

      <div class="navbar-form navbar-left">
          <label for="chxCounter">Rows counter:</label>
          <input id="chxCounter" type="checkbox" checked class="form-control"
              onclick="toggleRowsCounter(event);">
      </div>

      <div class="navbar-form navbar-left">
          <label for="chxGridLayout">Grid layout:</label>
          <input id="chxGridLayout" type="checkbox" checked class="form-control"
              onclick="toggleGridLayout(event);">
      </div>
  </div>
</div>
{{> countries-table-tiny }}

<p> </p>
<div class="alert alert-info" role="alert">
    NOTE: Toolbar above the HTML table is styled with Bootstrap.
</div>

{{> tablefilter-script }}

<script data-config>
    // Form submission logic for filtering the table
    function filter(evt){
        var frm = document.forms[0];
        var slc = frm.slcColumns;
        var inp = frm.inpSearch;

        // Set the column's filter value
        tf.setFilterValue(slc.value, inp.value);

        // Filter the table
        tf.filter();

        // Prevent form submission
        evt.preventDefault();
    }

    // Toggle pagination
    function togglePagination(evt){
        var chx = evt.target;
        // Get paging feature instance
        var feature = tf.feature('paging');

        if(chx.checked){
            tf.paging = true;
            feature.reset();
        } else {
            tf.paging = false;
            feature.destroy();
            // Display all rows
            tf.filter();
        }
    }

    // Toggle alternating rows
    function toggleAlternatingRows(evt){
        var chx = evt.target;
        // Get alternating rows feature instance
        var feature = tf.feature('alternateRows');

        if(chx.checked){
            tf.alternateRows = true;
            feature.reset();
        } else {
            tf.alternateRows = false;
            feature.destroy();
        }
    }

    // Toggle rows counter
    function toggleRowsCounter(evt){
        var chx = evt.target;
        // Get rows counter feature instance
        var feature = tf.feature('rowsCounter');

        if(chx.checked){
            tf.rowsCounter = true;
            feature.reset();
        } else {
            tf.rowsCounter = false;
            feature.destroy();
        }
    }

    // Toggle grid-layout mode
    function toggleGridLayout(evt){
        var chx = evt.target;

        tf.destroy();
        tf = createTableFilter(chx.checked);
        tf.init();
    }


    function createTableFilter(gridLayout) {
        return new TableFilter(
            document.querySelector('.countries-tiny'),
            {
                base_path: 'tablefilter/',
                alternate_rows: true,
                rows_counter: true,
                paging: true,
                grid_layout: gridLayout ? {
                    width: '100%',
                    height: '350px'
                } : false,
                col_widths: [
                    '120px','120px','120px',
                    '120px','120px','120px',
                    '120px','120px','120px'
                ],
                on_filters_loaded: function(tf){
                    var dom = tf.gridLayout ?
                        tf.feature('gridLayout').headTbl : tf.dom();

                    // hide the filters row
                    dom.rows[tf.getFiltersRowIndex()].style.display = 'none';
                }
            }
        );
    }

    var tf = createTableFilter(true);
    tf.init();
</script>

{{> code-tabs }}
