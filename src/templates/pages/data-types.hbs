---
title: Data types, column operations
heading: 'Data types, column operations'
section: 'examples'
---

<h1>{{ heading }}</h1>

<p>
    This example shows how to define column types with the
    <code>col_types</code> option and specifically numeric formats with:
</p>
<ul>
    <li>"." thousands separator and "," decimal separator for &euro; column</li>
    <li>"," thousands separator and "." decimal separator for US$ column</li>
</ul>
<p>
    and date types with <code>locale</code> and <code>format</code> specified on
    a column basis.
</p>

<div class="alert alert-info" role="alert">
    <code>col_type</code> property sets data types on a column basis, below a list
    of types it can now support:
    <ul>
      <li><code>string</code> (default column type if none specified)</li>
      <li><code>number</code> (unformatted number)</li>
      <li>
        <code>formatted-number</code>
        (formatted number with '.' decimal separator and
        ',' thousands separator) or

        <ul>
          <li>
            <code>{ type: 'formatted-number', decimal: ',', thousands: '.' }</code>
            for extended customisation
          </li>
        </ul>
      </li>
      <li>
        <code>date</code>
        defaulting to <code>en</code> locale or

        <ul>
          <li>
            <code>{ type: 'date', locale: 'en-GB', format: ['{dd}-{months}-{yyyy|yy}'] }</code>
            for extended customisation <sup><strong>*</strong></sup>
          </li>
        </ul>
      </li>
      <li><code>ipaddress</code> (specific to column sorting)</li>
      <li><code>caseinsensitivestring</code> (specific to column sorting)</li>
      <li><code>none</code> (specific to column sorting)</li>
    </ul>
    <hr>
    <p>
      <sup><strong>*</strong></sup>
      To learn more about supported date formats and locales:<br>
      <a href="https://sugarjs.com/docs/#/DateFormatting" target="_blank">
        https://sugarjs.com/docs/#/DateFormatting</a>
    </p>
</div>

{{> dummy-table-with-totals-footer }}

{{> tablefilter-script }}

<script data-config>
    var id = function (id){
        return document.getElementById(id);
    };
    var table = id('demo-tot');
    var totRowIndex = table.getElementsByTagName('tr').length;

    /* EXAMPLE 1
     *********************** */
    var tfConfig = {
        base_path: 'tablefilter/',
        filters_row_index: 1,
        alternate_rows: true,
        rows_counter: true,
        btn_reset: true,
        loader: true,
        status_bar: true,
        col_types: [
            'string',
            'string',
            'string',
            { type: 'formatted-number', decimal: ',', thousands: '.' },
            'formatted-number', // defaults to '.' for decimal and ',' for thousands
            'string',
            { type: 'date', locale: 'fr' },
            { type: 'date', locale: 'en', format: '{dd}-{MM}-{yyyy|yy}' }, // extends 'en' locale with additional format
            { type: 'date', locale: 'en', format: ['{dd}-{months}-{yyyy|yy}'] },
            'ipaddress'
        ],
        exclude_rows: [totRowIndex],
        on_filters_loaded: function(tf){
            tf.setFilterValue(3, '>1.000');
            tf.setFilterValue(4, '<2,500');
            tf.setFilterValue(6, '>23-01-95');
            tf.setFilterValue(8, '<2000');
            tf.filter();
        },
        extensions:[
            { name: 'sort' },
            {
                name: 'colOps',
                id: ['sum1', 'sum2'],
                col: [3, 4],
                operation: ['sum', 'sum'],
                write_method: ['innerhtml', 'innerhtml'],
                exclude_row: [totRowIndex],
                decimal_precision: [2, 2],
                tot_row_index: [totRowIndex],
                format_result: [
                  { prefix: 'â‚¬ ' },
                  { prefix: '$ ' }
                ]
            }
        ]
    };

    var tf = new TableFilter('demo-tot', tfConfig);
    tf.init();
</script>

<hr style="visibility:hidden;">
<p></p>
<p>
    Below an example of ISO date support ({yyyy|yy}/{MM}/{dd}).
    Use <code>locale</code> to set a locale globally
    (defaults to 'en').
</p>

{{> dummy-table }}

<script data-config>
    /* EXAMPLE 2
     *********************** */
    var tf2Config = {
        base_path: 'tablefilter/',
        alternate_rows: true,
        rows_counter: true,
        btn_reset: true,
        loader: true,
        status_bar: true,
        locale: 'en-US',
        col_types: [
            'string', 'number', 'string',
            'number', 'string', 'date'
        ],
        on_filters_loaded: function(tf){
            tf.setFilterValue(5, '>95-05-18');
            tf.filter();
        }
    };

    var tf2 = new TableFilter('demo', tf2Config);
    tf2.init();
</script>

{{> code-tabs }}
