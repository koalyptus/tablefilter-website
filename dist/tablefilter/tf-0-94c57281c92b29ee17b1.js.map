{"version":3,"sources":["webpack:///./src sync ^\\.\\/.*$","webpack:///./src/extensions/sort/adapterSortabletable.js","webpack:///./src/extensions/advancedGrid/adapterEzEditTable.js","webpack:///./src/extensions/sort/sort.js","webpack:///./src/extensions/filtersVisibility/filtersVisibility.js","webpack:///./src/extensions/colsVisibility/colsVisibility.js","webpack:///./src/extensions/colOps/colOps.js","webpack:///./src/extensions/advancedGrid/advancedGrid.js","webpack:///./libs/sortabletable.js","webpack:///./node_modules/script-loader/addScript.js","webpack:///./libs/sortabletable.js?8203","webpack:///./node_modules/format-number/index.js"],"names":["map","./array","./array.js","./const","./const.js","./cookie","./cookie.js","./dom","./dom.js","./emitter","./emitter.js","./event","./event.js","./extensions/advancedGrid/adapterEzEditTable","./extensions/advancedGrid/adapterEzEditTable.js","./extensions/advancedGrid/advancedGrid","./extensions/advancedGrid/advancedGrid.js","./extensions/colOps/colOps","./extensions/colOps/colOps.js","./extensions/colsVisibility/colsVisibility","./extensions/colsVisibility/colsVisibility.js","./extensions/filtersVisibility/filtersVisibility","./extensions/filtersVisibility/filtersVisibility.js","./extensions/sort/adapterSortabletable","./extensions/sort/adapterSortabletable.js","./extensions/sort/sort","./extensions/sort/sort.js","./feature","./feature.js","./modules/alternateRows","./modules/alternateRows.js","./modules/baseDropdown","./modules/baseDropdown.js","./modules/checkList","./modules/checkList.js","./modules/clearButton","./modules/clearButton.js","./modules/dateType","./modules/dateType.js","./modules/dropdown","./modules/dropdown.js","./modules/gridLayout","./modules/gridLayout.js","./modules/hash","./modules/hash.js","./modules/help","./modules/help.js","./modules/highlightKeywords","./modules/highlightKeywords.js","./modules/loader","./modules/loader.js","./modules/markActiveColumns","./modules/markActiveColumns.js","./modules/noResults","./modules/noResults.js","./modules/paging","./modules/paging.js","./modules/popupFilter","./modules/popupFilter.js","./modules/rowsCounter","./modules/rowsCounter.js","./modules/state","./modules/state.js","./modules/statusBar","./modules/statusBar.js","./modules/storage","./modules/storage.js","./modules/toolbar","./modules/toolbar.js","./number","./number.js","./root","./root.js","./settings","./settings.js","./sort","./sort.js","./string","./string.js","./tablefilter","./tablefilter.js","./types","./types.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","_feature","_types","_dom","_event","_number","_const","_settings","AdapterSortableTable","tf","opts","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","name","desc","defaultsStr","description","sorted","sortTypes","defaultsArr","types","colTypes","sortColAtStart","sort_col_at_start","asyncSort","Boolean","async_sort","triggerIds","trigger_ids","imgPath","images_path","themesPath","imgBlank","image_blank","imgClassName","image_class_name","imgAscClassName","image_asc_class_name","imgDescClassName","image_desc_class_name","customKey","custom_key","onSortLoaded","defaultsFn","on_sort_loaded","EMPTY_FN","onBeforeSort","on_before_sort","onAfterSort","on_after_sort","stt","enable","initialized","adpt","isUndef","SortableTable","emitter","emit","overrideSortableTable","setSortTypes","onbeforesort","sortColumn","paging","feature","disable","onsort","paginator","getValidRows","setPage","getPage","descending","sort","on","bound","sortByColumnIndexHandler","colIdx","sortByColumnIndex","prototype","headerOnclick","evt","el","target","srcElement","tagName","CELL_TAG","HEADER_TAG","parentNode","msie","getCellIndex","cellIndex","oTd","cells","l","length","i","initHeader","oSortTypes","tHead","gridLayout","headTbl","headersRow","rows","img","c","style","cursor","createElm","appendChild","setAttribute","addEvt","_headerOnclick","_sortType","updateHeaderArrows","triggers","j","push","elm","cell","cellAttr","getAttribute","lastChild","nodeName","toLowerCase","className","getRowValue","oRow","sType","nColumn","sortTypeInfo","_sortTypeInfo","s","getInnerText","getValueFromString","getCellValue","_len","arguments","args","Array","_key","caster","sorter","addSortType","_this2","_sortTypes","eachCol","colType","isObj","type","DATE","_addDateType","FORMATTED_NUMBER","decimal","decimalSeparator","_addNumberType","toUpperCase","STRING","IP_ADDRESS","ipAddress","sortIP","dom","trigger","indexOf","colIndex","dateType","locale","getOptions","value","parsedDate","parse","isNaN","Date","off","destroy","ids","getFiltersId","idx","header","getHeaderElement","tag","removeChild","vals","split","x","val","join","a","b","aa","bb","_root","AdapterEzEditTable","cfg","filename","vendorPath","vendor_path","loadStylesheet","load_stylesheet","stylesheet","stylesheetName","stylesheet_name","scroll_into_view","_ezEditTable","root","EditTable","_setAdvancedGrid","path","import","isImported","_toggleForInputFilter","startRow","undefined","refRow","base_path","basePath","editable","selectable","selection","default_selection","active_cell_css","_lastValidRowIndex","_lastRowIndex","onAfterSelection","et","selectedElm","slc","Selection","doSelect","nextRowIndex","defaultSelection","SelectRowByIndex","ClearSelections","row","SelectCell","validRowsIndex","getRowsNb","r","scrollIntoView","getCellsNb","tblCont","scrollLeft","validIndexes","validIdxLen","keyCode","Event","GetKey","isRowValid","rowIndex","d","pageLength","nbRowsPerPage","calcRowIndex","v","onBeforeSelection","nbPages","pagingEndRow","parseInt","startPagingRow","currentPageNb","onAfterChangePage","extension","GetActiveRow","GetActiveCell","fnB","on_before_selected_row","fnA","on_after_selected_row","fnD","on_before_selected_cell","fnC","on_after_selected_cell","fnE","on_added_dom_row","nbFilterableRows","reset","alternateRows","init","actions","fnF","on_after_submit","Init","INSTANTIATION_ERROR","ezEditTable","Set","Editable","Remove","getActiveFilterId","getColumnIndexFromFilterId","getFilterType","filterType","toggle","_this3","_adapterSortabletable","_toolbar","FiltersVisibility","f","icnExpand","expand_icon_name","icnCollapse","collapse_icon_name","contEl","btnEl","icnExpandHtml","icnCollapseHtml","defaultText","targetId","target_id","enableIcon","defaultsBool","enable_icon","btnText","btn_text","collapseBtnHtml","expandBtnHtml","btnHtml","btn_html","btnCssClass","btn_css_class","contCssClass","cont_css_class","filtersRowIndex","defaultsNb","filters_row_index","getFiltersRowIndex","visibleAtStart","visible_at_start","toolbarPosition","toolbar_position","RIGHT","onBeforeShow","on_before_show","onAfterShow","on_after_show","onBeforeHide","on_before_hide","onAfterHide","on_after_hide","getStylePath","isNull","buildUI","visible","show","span","targetEl","container","firstChild","insertBefore","btn","innerHTML","title","isDisplayed","display","fltRow","_this4","removeElm","ColsVisibility","config","spanEl","tickToHide","tick_to_hide","manager","headersTbl","headers_table","headersIndex","headers_index","contElTgtId","container_target_id","headersText","headers_text","btnTgtId","btn_target_id","btnCloseText","btn_close_text","btnCloseHtml","btn_close_html","btnCloseCssClass","btn_close_css_class","spanCssClass","span_css_class","listCssClass","list_css_class","listItemCssClass","checklist_item_css_class","listSlcItemCssClass","checklist_selected_item_css_class","text","atStart","at_start","enableHover","enable_hover","enableTickAll","enable_tick_all","tickAllText","tick_all_text","hiddenCols","boundMouseup","onLoaded","on_loaded","onBeforeOpen","on_before_open","onAfterOpen","on_after_open","onBeforeClose","on_before_close","onAfterClose","on_after_close","onBeforeColHidden","on_before_col_hidden","onAfterColHidden","on_after_col_hidden","onBeforeColDisplayed","on_before_col_displayed","onAfterColDisplayed","on_after_col_displayed","targetElm","targetEvt","removeEvt","contDisplay","NONE","lbl","li","isChecked","checked","addClass","removeClass","hide","setHidden","hideCol","buildBtn","buildManager","onMouseup","bind","_hideAtStart","colVisEl","extNameLabel","ul","tbl","headerIndex","getHeadersRowIndex","headerRow","createCheckItem","check","h","itm","click","cellText","_getHeaderText","liElm","checkItem","p","_hideElements","itemIndex","splice","isColHidden","showCol","_this5","hasChildNodes","childNodes","n","nodeType","nodeValue","getText","_hideCells","_hideCol","colElms","_this6","forEach","_sort","_formatNumber","EVENTS","ColOps","onBeforeOperation","on_before_operation","onAfterOperation","on_after_operation","labelIds","colIndexes","col","operations","operation","outputTypes","write_method","formatResults","format_result","totRowIndexes","tot_row_index","excludeRows","exclude_row","decimalPrecisions","decimal_precision","calcAll","isInitialized","colOperations","uIndexes","nbCols","colValues","u","getVisibleColumnData","curValues","result","precisions","labels","writeType","formatResult","k","isArray","configureFormat","Number","calc","writeResult","totRow","precision","sortColumnValues","numSortAsc","calcMean","calcSum","calcMin","calcMax","calcMedian","calcQ1","calcQ3","isEmpty","toFixed","values","reduce","y","Math","max","apply","min","nbValues","aux","floor","posa","posb","label","format","labelElm","isFinite","_formatNumber2","default","oldNode","txtNode","createText","replaceChild","hasType","thousands","integerSeparator","_adapterEzEditTable","src","log","error","console","execScript","attachEvent","addEventListener","eval","formatter","options","negativeType","negative","negativeLeftSymbol","negativeRightSymbol","number","overrideOptions","output","charAt","replace","negativeLeftOut","noUnits","prefix","round","places","decim","slice","substr","leadingzeros","substring","truncate","padLeft","padding","buf","padRight","noSeparator","separator","rgx","test","addDecimalSeparators","decimalsSeparator","addIntegerSeparators","negativeRightOut","suffix","unformat","allowedSeparators","newNumber","negativeOut","separate"],"mappings":"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","file":"tf-0-94c57281c92b29ee17b1.js","sourcesContent":["var map = {\n\t\"./array\": 69,\n\t\"./array.js\": 69,\n\t\"./const\": 15,\n\t\"./const.js\": 15,\n\t\"./cookie\": 120,\n\t\"./cookie.js\": 120,\n\t\"./dom\": 10,\n\t\"./dom.js\": 10,\n\t\"./emitter\": 127,\n\t\"./emitter.js\": 127,\n\t\"./event\": 18,\n\t\"./event.js\": 18,\n\t\"./extensions/advancedGrid/adapterEzEditTable\": 442,\n\t\"./extensions/advancedGrid/adapterEzEditTable.js\": 442,\n\t\"./extensions/advancedGrid/advancedGrid\": 447,\n\t\"./extensions/advancedGrid/advancedGrid.js\": 447,\n\t\"./extensions/colOps/colOps\": 446,\n\t\"./extensions/colOps/colOps.js\": 446,\n\t\"./extensions/colsVisibility/colsVisibility\": 445,\n\t\"./extensions/colsVisibility/colsVisibility.js\": 445,\n\t\"./extensions/filtersVisibility/filtersVisibility\": 444,\n\t\"./extensions/filtersVisibility/filtersVisibility.js\": 444,\n\t\"./extensions/sort/adapterSortabletable\": 441,\n\t\"./extensions/sort/adapterSortabletable.js\": 441,\n\t\"./extensions/sort/sort\": 443,\n\t\"./extensions/sort/sort.js\": 443,\n\t\"./feature\": 11,\n\t\"./feature.js\": 11,\n\t\"./modules/alternateRows\": 111,\n\t\"./modules/alternateRows.js\": 111,\n\t\"./modules/baseDropdown\": 70,\n\t\"./modules/baseDropdown.js\": 70,\n\t\"./modules/checkList\": 108,\n\t\"./modules/checkList.js\": 108,\n\t\"./modules/clearButton\": 112,\n\t\"./modules/clearButton.js\": 112,\n\t\"./modules/dateType\": 125,\n\t\"./modules/dateType.js\": 125,\n\t\"./modules/dropdown\": 126,\n\t\"./modules/dropdown.js\": 126,\n\t\"./modules/gridLayout\": 119,\n\t\"./modules/gridLayout.js\": 119,\n\t\"./modules/hash\": 122,\n\t\"./modules/hash.js\": 122,\n\t\"./modules/help\": 124,\n\t\"./modules/help.js\": 124,\n\t\"./modules/highlightKeywords\": 117,\n\t\"./modules/highlightKeywords.js\": 117,\n\t\"./modules/loader\": 118,\n\t\"./modules/loader.js\": 118,\n\t\"./modules/markActiveColumns\": 115,\n\t\"./modules/markActiveColumns.js\": 115,\n\t\"./modules/noResults\": 110,\n\t\"./modules/noResults.js\": 110,\n\t\"./modules/paging\": 109,\n\t\"./modules/paging.js\": 109,\n\t\"./modules/popupFilter\": 116,\n\t\"./modules/popupFilter.js\": 116,\n\t\"./modules/rowsCounter\": 114,\n\t\"./modules/rowsCounter.js\": 114,\n\t\"./modules/state\": 123,\n\t\"./modules/state.js\": 123,\n\t\"./modules/statusBar\": 113,\n\t\"./modules/statusBar.js\": 113,\n\t\"./modules/storage\": 121,\n\t\"./modules/storage.js\": 121,\n\t\"./modules/toolbar\": 33,\n\t\"./modules/toolbar.js\": 33,\n\t\"./number\": 68,\n\t\"./number.js\": 68,\n\t\"./root\": 16,\n\t\"./root.js\": 16,\n\t\"./settings\": 7,\n\t\"./settings.js\": 7,\n\t\"./sort\": 107,\n\t\"./sort.js\": 107,\n\t\"./string\": 21,\n\t\"./string.js\": 21,\n\t\"./tablefilter\": 128,\n\t\"./tablefilter.js\": 128,\n\t\"./types\": 3,\n\t\"./types.js\": 3\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 440;","import {Feature} from '../../feature';\nimport {isUndef, isObj, EMPTY_FN} from '../../types';\nimport {createElm, elm, tag} from '../../dom';\nimport {addEvt, bound} from '../../event';\nimport {parse as parseNb} from '../../number';\nimport {\n    NONE, CELL_TAG, HEADER_TAG, STRING, NUMBER, DATE, FORMATTED_NUMBER,\n    IP_ADDRESS\n} from '../../const';\nimport {defaultsStr, defaultsFn, defaultsArr} from '../../settings';\n\n/**\n * SortableTable Adapter module\n */\nexport default class AdapterSortableTable extends Feature {\n\n    /**\n     * Creates an instance of AdapterSortableTable\n     * @param {TableFilter} tf TableFilter instance\n     * @param {Object} opts Configuration object\n     */\n    constructor(tf, opts) {\n        super(tf, opts.name);\n\n        /**\n         * Module name\n         * @type {String}\n         */\n        this.name = opts.name;\n\n        /**\n         * Module description\n         * @type {String}\n         */\n        this.desc = defaultsStr(opts.description, 'Sortable table');\n\n        /**\n         * Indicate whether table previously sorted\n         * @type {Boolean}\n         * @private\n         */\n        this.sorted = false;\n\n        /**\n         * List of sort type per column basis\n         * @type {Array}\n         */\n        this.sortTypes = defaultsArr(opts.types, tf.colTypes);\n\n        /**\n         * Column to be sorted at initialization, ie:\n         * sort_col_at_start: [1, true]\n         * @type {Array}\n         */\n        this.sortColAtStart = defaultsArr(opts.sort_col_at_start, null);\n\n        /**\n         * Enable asynchronous sort, if triggers are external\n         * @type {Boolean}\n         */\n        this.asyncSort = Boolean(opts.async_sort);\n\n        /**\n         * List of element IDs triggering sort on a per column basis\n         * @type {Array}\n         */\n        this.triggerIds = defaultsArr(opts.trigger_ids, []);\n\n        // edit .sort-arrow.descending / .sort-arrow.ascending in\n        // tablefilter.css to reflect any path change\n        /**\n         * Path to images\n         * @type {String}\n         */\n        this.imgPath = defaultsStr(opts.images_path, tf.themesPath);\n\n        /**\n         * Blank image file name\n         * @type {String}\n         */\n        this.imgBlank = defaultsStr(opts.image_blank, 'blank.png');\n\n        /**\n         * Css class for sort indicator image\n         * @type {String}\n         */\n        this.imgClassName = defaultsStr(opts.image_class_name, 'sort-arrow');\n\n        /**\n         * Css class for ascending sort indicator image\n         * @type {String}\n         */\n        this.imgAscClassName = defaultsStr(opts.image_asc_class_name,\n            'ascending');\n\n        /**\n         * Css class for descending sort indicator image\n         * @type {String}\n         */\n        this.imgDescClassName = defaultsStr(opts.image_desc_class_name,\n            'descending');\n\n        /**\n         * Cell attribute key storing custom value used for sorting\n         * @type {String}\n         */\n        this.customKey = defaultsStr(opts.custom_key, 'data-tf-sortKey');\n\n        /**\n         * Callback fired when sort extension is instanciated\n         * @type {Function}\n         */\n        this.onSortLoaded = defaultsFn(opts.on_sort_loaded, EMPTY_FN);\n\n        /**\n         * Callback fired before a table column is sorted\n         * @type {Function}\n         */\n        this.onBeforeSort = defaultsFn(opts.on_before_sort, EMPTY_FN);\n\n        /**\n         * Callback fired after a table column is sorted\n         * @type {Function}\n         */\n        this.onAfterSort = defaultsFn(opts.on_after_sort, EMPTY_FN);\n\n        /**\n         * SortableTable instance\n         * @private\n         */\n        this.stt = null;\n\n        this.enable();\n    }\n\n    /**\n     * Initializes AdapterSortableTable instance\n     */\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        let tf = this.tf;\n        let adpt = this;\n\n        // SortableTable class sanity check (sortabletable.js)\n        if (isUndef(SortableTable)) {\n            throw new Error('SortableTable class not found.');\n        }\n\n        // Add any date format if needed\n        this.emitter.emit('add-date-type-formats', this.tf, this.sortTypes);\n\n        this.overrideSortableTable();\n        this.setSortTypes();\n\n        this.onSortLoaded(tf, this);\n\n        /*** SortableTable callbacks ***/\n        this.stt.onbeforesort = function () {\n            adpt.onBeforeSort(tf, adpt.stt.sortColumn);\n\n            /*** sort behaviour for paging ***/\n            if (tf.paging) {\n                tf.feature('paging').disable();\n            }\n        };\n\n        this.stt.onsort = function () {\n            adpt.sorted = true;\n\n            //sort behaviour for paging\n            if (tf.paging) {\n                let paginator = tf.feature('paging');\n                // recalculate valid rows index as sorting may have change it\n                tf.getValidRows(true);\n                paginator.enable();\n                paginator.setPage(paginator.getPage());\n            }\n\n            adpt.onAfterSort(tf, adpt.stt.sortColumn, adpt.stt.descending);\n            adpt.emitter.emit('column-sorted', tf, adpt.stt.sortColumn,\n                adpt.stt.descending);\n        };\n\n        // Column sort at start\n        let sortColAtStart = adpt.sortColAtStart;\n        if (sortColAtStart) {\n            this.stt.sort(sortColAtStart[0], sortColAtStart[1]);\n        }\n\n        this.emitter.on(['sort'], bound(this.sortByColumnIndexHandler, this));\n\n        /** @inherited */\n        this.initialized = true;\n\n        this.emitter.emit('sort-initialized', tf, this);\n    }\n\n    /**\n     * Sort specified column\n     * @param {Number} colIdx Column index\n     * @param {Boolean} desc Optional: descending manner\n     */\n    sortByColumnIndex(colIdx, desc) {\n        this.stt.sort(colIdx, desc);\n    }\n\n    /** @private */\n    sortByColumnIndexHandler(tf, colIdx, desc) {\n        this.sortByColumnIndex(colIdx, desc);\n    }\n\n    /**\n     * Set SortableTable overrides for TableFilter integration\n     */\n    overrideSortableTable() {\n        let adpt = this,\n            tf = this.tf;\n\n        /**\n         * Overrides headerOnclick method in order to handle th event\n         * @param  {Object} e [description]\n         */\n        SortableTable.prototype.headerOnclick = function (evt) {\n            if (!adpt.initialized) {\n                return;\n            }\n\n            // find Header element\n            let el = evt.target || evt.srcElement;\n\n            while (el.tagName !== CELL_TAG && el.tagName !== HEADER_TAG) {\n                el = el.parentNode;\n            }\n\n            this.sort(\n                SortableTable.msie ?\n                    SortableTable.getCellIndex(el) : el.cellIndex\n            );\n        };\n\n        /**\n         * Overrides getCellIndex IE returns wrong cellIndex when columns are\n         * hidden\n         * @param  {Object} oTd TD element\n         * @return {Number}     Cell index\n         */\n        SortableTable.getCellIndex = function (oTd) {\n            let cells = oTd.parentNode.cells,\n                l = cells.length, i;\n            for (i = 0; cells[i] !== oTd && i < l; i++) { }\n            return i;\n        };\n\n        /**\n         * Overrides initHeader in order to handle filters row position\n         * @param  {Array} oSortTypes\n         */\n        SortableTable.prototype.initHeader = function (oSortTypes) {\n            let stt = this;\n            if (!stt.tHead) {\n                if (tf.gridLayout) {\n                    stt.tHead = tf.feature('gridLayout').headTbl.tHead;\n                } else {\n                    return;\n                }\n            }\n\n            stt.headersRow = tf.headersRow;\n            let cells = stt.tHead.rows[stt.headersRow].cells;\n            stt.sortTypes = oSortTypes || [];\n            let l = cells.length;\n            let img, c;\n\n            for (let i = 0; i < l; i++) {\n                c = cells[i];\n                if (stt.sortTypes[i] !== null && stt.sortTypes[i] !== 'None') {\n                    c.style.cursor = 'pointer';\n                    img = createElm('img',\n                        ['src', adpt.imgPath + adpt.imgBlank]);\n                    c.appendChild(img);\n                    if (stt.sortTypes[i] !== null) {\n                        c.setAttribute('_sortType', stt.sortTypes[i]);\n                    }\n                    addEvt(c, 'click', stt._headerOnclick);\n                } else {\n                    c.setAttribute('_sortType', oSortTypes[i]);\n                    c._sortType = 'None';\n                }\n            }\n            stt.updateHeaderArrows();\n        };\n\n        /**\n         * Overrides updateHeaderArrows in order to handle arrows indicators\n         */\n        SortableTable.prototype.updateHeaderArrows = function () {\n            let stt = this;\n            let cells, l, img;\n\n            // external headers\n            if (adpt.asyncSort && adpt.triggerIds.length > 0) {\n                let triggers = adpt.triggerIds;\n                cells = [];\n                l = triggers.length;\n                for (let j = 0; j < l; j++) {\n                    cells.push(elm(triggers[j]));\n                }\n            } else {\n                if (!this.tHead) {\n                    return;\n                }\n                cells = stt.tHead.rows[stt.headersRow].cells;\n                l = cells.length;\n            }\n            for (let i = 0; i < l; i++) {\n                let cell = cells[i];\n                if (!cell) {\n                    continue;\n                }\n                let cellAttr = cell.getAttribute('_sortType');\n                if (cellAttr !== null && cellAttr !== 'None') {\n                    img = cell.lastChild || cell;\n                    if (img.nodeName.toLowerCase() !== 'img') {\n                        img = createElm('img',\n                            ['src', adpt.imgPath + adpt.imgBlank]);\n                        cell.appendChild(img);\n                    }\n                    if (i === stt.sortColumn) {\n                        img.className = adpt.imgClassName + ' ' +\n                            (this.descending ?\n                                adpt.imgDescClassName :\n                                adpt.imgAscClassName);\n                    } else {\n                        img.className = adpt.imgClassName;\n                    }\n                }\n            }\n        };\n\n        /**\n         * Overrides getRowValue for custom key value feature\n         * @param  {Object} oRow    Row element\n         * @param  {String} sType\n         * @param  {Number} nColumn\n         * @return {String}\n         */\n        SortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\n            let stt = this;\n            // if we have defined a custom getRowValue use that\n            let sortTypeInfo = stt._sortTypeInfo[sType];\n            if (sortTypeInfo && sortTypeInfo.getRowValue) {\n                return sortTypeInfo.getRowValue(oRow, nColumn);\n            }\n            let c = oRow.cells[nColumn];\n            let s = SortableTable.getInnerText(c);\n            return stt.getValueFromString(s, sType);\n        };\n\n        /**\n         * Overrides getInnerText in order to avoid Firefox unexpected sorting\n         * behaviour with untrimmed text elements\n         * @param  {Object} cell DOM element\n         * @return {String}       DOM element inner text\n         */\n        SortableTable.getInnerText = function (cell) {\n            if (!cell) {\n                return;\n            }\n            if (cell.getAttribute(adpt.customKey)) {\n                return cell.getAttribute(adpt.customKey);\n            } else {\n                // return getText(cell);\n                return tf.getCellValue(cell);\n            }\n        };\n    }\n\n    /**\n     * Adds a sort type\n     */\n    addSortType(...args) {\n        // Extract the arguments\n        let [id, caster, sorter] = args;\n        SortableTable.prototype.addSortType(id, caster, sorter);\n    }\n\n    /**\n     * Sets the sort types on a column basis\n     * @private\n     */\n    setSortTypes() {\n        let tf = this.tf,\n            sortTypes = this.sortTypes,\n            _sortTypes = [];\n\n        tf.eachCol((i) => {\n            let colType;\n            if (sortTypes[i]) {\n                colType = sortTypes[i];\n                if (isObj(colType)) {\n                    if (colType.type === DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    }\n                    else if (colType.type === FORMATTED_NUMBER) {\n                        let decimal = colType.decimal || tf.decimalSeparator;\n                        colType = this._addNumberType(i, decimal);\n                    }\n                } else {\n                    colType = colType.toLowerCase();\n                    if (colType === DATE) {\n                        colType = this._addDateType(i, sortTypes);\n                    }\n                    else if (colType === FORMATTED_NUMBER ||\n                        colType === NUMBER) {\n                        colType = this._addNumberType(i, tf.decimalSeparator);\n                    }\n                    else if (colType === NONE) {\n                        // TODO: normalise 'none' vs 'None'\n                        colType = 'None';\n                    }\n                }\n            } else {\n                colType = STRING;\n            }\n            _sortTypes.push(colType);\n        });\n\n        //Public TF method to add sort type\n\n        //Custom sort types\n        this.addSortType('caseinsensitivestring', SortableTable.toUpperCase);\n        this.addSortType(STRING);\n        this.addSortType(IP_ADDRESS, ipAddress, sortIP);\n\n        this.stt = new SortableTable(tf.dom(), _sortTypes);\n\n        /*** external table headers adapter ***/\n        if (this.asyncSort && this.triggerIds.length > 0) {\n            let triggers = this.triggerIds;\n            for (let j = 0; j < triggers.length; j++) {\n                if (triggers[j] === null) {\n                    continue;\n                }\n                let trigger = elm(triggers[j]);\n                if (trigger) {\n                    trigger.style.cursor = 'pointer';\n\n                    addEvt(trigger, 'click', (evt) => {\n                        let elm = evt.target;\n                        if (!this.tf.sort) {\n                            return;\n                        }\n                        this.stt.asyncSort(triggers.indexOf(elm.id));\n                    });\n                    trigger.setAttribute('_sortType', _sortTypes[j]);\n                }\n            }\n        }\n    }\n\n    _addDateType(colIndex, types) {\n        let tf = this.tf;\n        let dateType = tf.feature('dateType');\n        let locale = dateType.getOptions(colIndex, types).locale || tf.locale;\n        let colType = `${DATE}-${locale}`;\n\n        this.addSortType(colType, (value) => {\n            let parsedDate = dateType.parse(value, locale);\n            // Invalid date defaults to Wed Feb 04 -768 11:00:00\n            return isNaN(+parsedDate) ? new Date(-86400000000000) : parsedDate;\n        });\n        return colType;\n    }\n\n    _addNumberType(colIndex, decimal) {\n        let colType = `${FORMATTED_NUMBER}${decimal === '.' ? '' : '-custom'}`;\n\n        this.addSortType(colType, (value) => {\n            return parseNb(value, decimal);\n        });\n        return colType;\n    }\n\n    /**\n     * Remove extension\n     */\n    destroy() {\n        if (!this.initialized) {\n            return;\n        }\n        let tf = this.tf;\n        this.emitter.off(['sort'], bound(this.sortByColumnIndexHandler, this));\n        this.sorted = false;\n        this.stt.destroy();\n\n        let ids = tf.getFiltersId();\n        for (let idx = 0; idx < ids.length; idx++) {\n            let header = tf.getHeaderElement(idx);\n            let img = tag(header, 'img');\n\n            if (img.length === 1) {\n                header.removeChild(img[0]);\n            }\n        }\n        this.initialized = false;\n    }\n\n}\n\n//Converters\nfunction ipAddress(value) {\n    let vals = value.split('.');\n    for (let x in vals) {\n        let val = vals[x];\n        while (3 > val.length) {\n            val = '0' + val;\n        }\n        vals[x] = val;\n    }\n    return vals.join('.');\n}\n\nfunction sortIP(a, b) {\n    let aa = ipAddress(a.value.toLowerCase());\n    let bb = ipAddress(b.value.toLowerCase());\n    if (aa === bb) {\n        return 0;\n    } else if (aa < bb) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n","import {Feature} from '../../feature';\r\nimport {tag} from '../../dom';\r\nimport {INPUT} from '../../const';\r\nimport {defaultsStr} from '../../settings';\r\nimport {root} from '../../root';\r\n\r\nconst INSTANTIATION_ERROR = `Failed to instantiate EditTable object.\r\n    \\n\"ezEditTable\" dependency not found.`;\r\n\r\n/**\r\n * Adapter module for ezEditTable, an external library providing advanced\r\n * grid features (selection and edition):\r\n * http://codecanyon.net/item/ezedittable-enhance-html-tables/2425123?ref=koalyptus\r\n */\r\nexport default class AdapterEzEditTable extends Feature {\r\n\r\n    /**\r\n     * Creates an instance of AdapterEzEditTable\r\n     *\r\n     * @param {TableFilter} tf TableFilter instance\r\n     * @param {Object} cfg Configuration options for ezEditTable library\r\n     */\r\n    constructor(tf, cfg) {\r\n        super(tf, cfg.name);\r\n\r\n        /**\r\n         * Module description\r\n         * @type {String}\r\n         */\r\n        this.desc = defaultsStr(cfg.description, 'ezEditTable adapter');\r\n\r\n        /**\r\n         * Filename of ezEditTable library\r\n         * @type {String}\r\n         */\r\n        this.filename = defaultsStr(cfg.filename, 'ezEditTable.js');\r\n\r\n        /**\r\n         * Path to ezEditTable library\r\n         * @type {String}\r\n         */\r\n        this.vendorPath = cfg.vendor_path;\r\n\r\n        /**\r\n         * Load ezEditTable stylesheet\r\n         * @type {Boolean}\r\n         */\r\n        this.loadStylesheet = Boolean(cfg.load_stylesheet);\r\n\r\n        /**\r\n         * Path to ezEditTable stylesheet\r\n         * @type {String}\r\n         */\r\n        this.stylesheet = defaultsStr(cfg.stylesheet,\r\n            this.vendorPath + 'ezEditTable.css');\r\n\r\n        /**\r\n         * Name of ezEditTable stylesheet\r\n         * @type {String}\r\n         */\r\n        this.stylesheetName = defaultsStr(cfg.stylesheet_name,\r\n            'ezEditTableCss');\r\n\r\n        // Enable the ezEditTable's scroll into view behaviour if grid layout on\r\n        cfg.scroll_into_view = cfg.scroll_into_view === false ?\r\n            false : tf.gridLayout;\r\n\r\n        /**\r\n         * ezEditTable instance\r\n         * @type {EditTable}\r\n         * @private\r\n         */\r\n        this._ezEditTable = null;\r\n\r\n        /**\r\n         * ezEditTable configuration\r\n         * @private\r\n         */\r\n        this.cfg = cfg;\r\n\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * Conditionally load ezEditTable library and set advanced grid\r\n     */\r\n    init() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        let tf = this.tf;\r\n        if (root.EditTable) {\r\n            this._setAdvancedGrid();\r\n        } else {\r\n            let path = this.vendorPath + this.filename;\r\n            tf.import(this.filename, path, () => this._setAdvancedGrid());\r\n        }\r\n        if (this.loadStylesheet && !tf.isImported(this.stylesheet, 'link')) {\r\n            tf.import(this.stylesheetName, this.stylesheet, null, 'link');\r\n        }\r\n\r\n        // TODO: hack to prevent ezEditTable enter key event hijaking.\r\n        // Needs to be fixed in the vendor's library\r\n        this.emitter.on(['filter-focus', 'filter-blur'],\r\n            () => this._toggleForInputFilter());\r\n\r\n        /**\r\n         * @inherited\r\n         */\r\n        this.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * Instantiate ezEditTable component for advanced grid features\r\n     * @private\r\n     */\r\n    _setAdvancedGrid() {\r\n        let tf = this.tf;\r\n\r\n        //start row for EditTable constructor needs to be calculated\r\n        let startRow,\r\n            cfg = this.cfg,\r\n            thead = tag(tf.dom(), 'thead');\r\n\r\n        //if thead exists and startRow not specified, startRow is calculated\r\n        //automatically by EditTable\r\n        if (thead.length > 0 && !cfg.startRow) {\r\n            startRow = undefined;\r\n        }\r\n        //otherwise startRow config property if any or TableFilter refRow\r\n        else {\r\n            startRow = cfg.startRow || tf.refRow;\r\n        }\r\n\r\n        cfg.base_path = cfg.base_path || tf.basePath + 'ezEditTable/';\r\n        let editable = cfg.editable;\r\n        let selectable = cfg.selection;\r\n\r\n        if (selectable) {\r\n            cfg.default_selection = cfg.default_selection || 'row';\r\n        }\r\n        //CSS Styles\r\n        cfg.active_cell_css = cfg.active_cell_css || 'ezETSelectedCell';\r\n\r\n        let _lastValidRowIndex = 0;\r\n        let _lastRowIndex = 0;\r\n\r\n        if (selectable) {\r\n            //Row navigation needs to be calculated according to TableFilter's\r\n            //validRowsIndex array\r\n            let onAfterSelection = function (et, selectedElm, e) {\r\n                let slc = et.Selection;\r\n                //Next valid filtered row needs to be selected\r\n                let doSelect = function (nextRowIndex) {\r\n                    if (et.defaultSelection === 'row') {\r\n                        /* eslint-disable */\r\n                        slc.SelectRowByIndex(nextRowIndex);\r\n                        /* eslint-enable */\r\n                    } else {\r\n                        /* eslint-disable */\r\n                        et.ClearSelections();\r\n                        /* eslint-enable */\r\n                        let cellIndex = selectedElm.cellIndex,\r\n                            row = tf.dom().rows[nextRowIndex];\r\n                        if (et.defaultSelection === 'both') {\r\n                            /* eslint-disable */\r\n                            slc.SelectRowByIndex(nextRowIndex);\r\n                            /* eslint-enable */\r\n                        }\r\n                        if (row) {\r\n                            /* eslint-disable */\r\n                            slc.SelectCell(row.cells[cellIndex]);\r\n                            /* eslint-enable */\r\n                        }\r\n                    }\r\n                    //Table is filtered\r\n                    if (tf.validRowsIndex.length !== tf.getRowsNb()) {\r\n                        let r = tf.dom().rows[nextRowIndex];\r\n                        if (r) {\r\n                            r.scrollIntoView(false);\r\n                        }\r\n                        if (cell) {\r\n                            if (cell.cellIndex === (tf.getCellsNb() - 1) &&\r\n                                tf.gridLayout) {\r\n                                tf.tblCont.scrollLeft = 100000000;\r\n                            }\r\n                            else if (cell.cellIndex === 0 && tf.gridLayout) {\r\n                                tf.tblCont.scrollLeft = 0;\r\n                            } else {\r\n                                cell.scrollIntoView(false);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                //table is not filtered\r\n                if (!tf.validRowsIndex) {\r\n                    return;\r\n                }\r\n                let validIndexes = tf.validRowsIndex,\r\n                    validIdxLen = validIndexes.length,\r\n                    row = et.defaultSelection !== 'row' ?\r\n                        selectedElm.parentNode : selectedElm,\r\n                    //cell for default_selection = 'both' or 'cell'\r\n                    cell = selectedElm.nodeName === 'TD' ? selectedElm : null,\r\n                    /* eslint-disable */\r\n                    keyCode = e !== undefined ? et.Event.GetKey(e) : 0,\r\n                    /* eslint-enable */\r\n                    isRowValid = validIndexes.indexOf(row.rowIndex) !== -1,\r\n                    nextRowIndex,\r\n                    paging = tf.feature('paging'),\r\n                    //pgup/pgdown keys\r\n                    d = keyCode === 34 || keyCode === 33 ?\r\n                        (paging && paging.pageLength || et.nbRowsPerPage) :\r\n                        1;\r\n\r\n                //If next row is not valid, next valid filtered row needs to be\r\n                //calculated\r\n                if (!isRowValid) {\r\n                    //Selection direction up/down\r\n                    if (row.rowIndex > _lastRowIndex) {\r\n                        //last row\r\n                        if (row.rowIndex >= validIndexes[validIdxLen - 1]) {\r\n                            nextRowIndex = validIndexes[validIdxLen - 1];\r\n                        } else {\r\n                            let calcRowIndex = (_lastValidRowIndex + d);\r\n                            if (calcRowIndex > (validIdxLen - 1)) {\r\n                                nextRowIndex = validIndexes[validIdxLen - 1];\r\n                            } else {\r\n                                nextRowIndex = validIndexes[calcRowIndex];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //first row\r\n                        if (row.rowIndex <= validIndexes[0]) {\r\n                            nextRowIndex = validIndexes[0];\r\n                        } else {\r\n                            let v = validIndexes[_lastValidRowIndex - d];\r\n                            nextRowIndex = v ? v : validIndexes[0];\r\n                        }\r\n                    }\r\n                    _lastRowIndex = row.rowIndex;\r\n                    doSelect(nextRowIndex);\r\n                } else {\r\n                    //If filtered row is valid, special calculation for\r\n                    //pgup/pgdown keys\r\n                    if (keyCode !== 34 && keyCode !== 33) {\r\n                        _lastValidRowIndex = validIndexes.indexOf(row.rowIndex);\r\n                        _lastRowIndex = row.rowIndex;\r\n                    } else {\r\n                        if (keyCode === 34) { //pgdown\r\n                            //last row\r\n                            if ((_lastValidRowIndex + d) <= (validIdxLen - 1)) {\r\n                                nextRowIndex = validIndexes[\r\n                                    _lastValidRowIndex + d];\r\n                            } else {\r\n                                nextRowIndex = [validIdxLen - 1];\r\n                            }\r\n                        } else { //pgup\r\n                            //first row\r\n                            if ((_lastValidRowIndex - d) <= validIndexes[0]) {\r\n                                nextRowIndex = validIndexes[0];\r\n                            } else {\r\n                                nextRowIndex = validIndexes[\r\n                                    _lastValidRowIndex - d];\r\n                            }\r\n                        }\r\n                        _lastRowIndex = nextRowIndex;\r\n                        _lastValidRowIndex = validIndexes.indexOf(nextRowIndex);\r\n                        doSelect(nextRowIndex);\r\n                    }\r\n                }\r\n            };\r\n\r\n            //Page navigation has to be enforced whenever selected row is out of\r\n            //the current page range\r\n            let onBeforeSelection = function (et, selectedElm) {\r\n                let row = et.defaultSelection !== 'row' ?\r\n                    selectedElm.parentNode : selectedElm;\r\n                if (tf.paging) {\r\n                    if (tf.feature('paging').nbPages > 1) {\r\n                        let paging = tf.feature('paging');\r\n                        //page length is re-assigned in case it has changed\r\n                        et.nbRowsPerPage = paging.pageLength;\r\n                        let validIndexes = tf.validRowsIndex,\r\n                            validIdxLen = validIndexes.length,\r\n                            pagingEndRow = parseInt(paging.startPagingRow, 10) +\r\n                                parseInt(paging.pageLength, 10);\r\n                        let rowIndex = row.rowIndex;\r\n\r\n                        if ((rowIndex === validIndexes[validIdxLen - 1]) &&\r\n                            paging.currentPageNb !== paging.nbPages) {\r\n                            paging.setPage('last');\r\n                        }\r\n                        else if ((rowIndex === validIndexes[0]) &&\r\n                            paging.currentPageNb !== 1) {\r\n                            paging.setPage('first');\r\n                        }\r\n                        else if (rowIndex > validIndexes[pagingEndRow - 1] &&\r\n                            rowIndex < validIndexes[validIdxLen - 1]) {\r\n                            paging.setPage('next');\r\n                        }\r\n                        else if (\r\n                            rowIndex < validIndexes[paging.startPagingRow] &&\r\n                            rowIndex > validIndexes[0]) {\r\n                            paging.setPage('previous');\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            //Selected row needs to be visible when paging is activated\r\n            if (tf.paging) {\r\n                tf.feature('paging').onAfterChangePage = function (paging) {\r\n                    let advGrid = paging.tf.extension('advancedGrid');\r\n                    let et = advGrid._ezEditTable;\r\n                    let slc = et.Selection;\r\n                    /* eslint-disable */\r\n                    let row = slc.GetActiveRow();\r\n                    /* eslint-enable */\r\n                    if (row) {\r\n                        row.scrollIntoView(false);\r\n                    }\r\n                    /* eslint-disable */\r\n                    let cell = slc.GetActiveCell();\r\n                    /* eslint-enable */\r\n                    if (cell) {\r\n                        cell.scrollIntoView(false);\r\n                    }\r\n                };\r\n            }\r\n\r\n            //Rows navigation when rows are filtered is performed with the\r\n            //EditTable row selection callback events\r\n            if (cfg.default_selection === 'row') {\r\n                let fnB = cfg.on_before_selected_row;\r\n                cfg.on_before_selected_row = function () {\r\n                    var args = arguments;\r\n                    onBeforeSelection(args[0], args[1], args[2]);\r\n                    if (fnB) {\r\n                        fnB.call(null, args[0], args[1], args[2]);\r\n                    }\r\n                };\r\n                let fnA = cfg.on_after_selected_row;\r\n                cfg.on_after_selected_row = function () {\r\n                    var args = arguments;\r\n                    onAfterSelection(args[0], args[1], args[2]);\r\n                    if (fnA) {\r\n                        fnA.call(null, args[0], args[1], args[2]);\r\n                    }\r\n                };\r\n            } else {\r\n                let fnD = cfg.on_before_selected_cell;\r\n                cfg.on_before_selected_cell = function () {\r\n                    var args = arguments;\r\n                    onBeforeSelection(args[0], args[1], args[2]);\r\n                    if (fnD) {\r\n                        fnD.call(null, args[0], args[1], args[2]);\r\n                    }\r\n                };\r\n                let fnC = cfg.on_after_selected_cell;\r\n                cfg.on_after_selected_cell = function () {\r\n                    var args = arguments;\r\n                    onAfterSelection(args[0], args[1], args[2]);\r\n                    if (fnC) {\r\n                        fnC.call(null, args[0], args[1], args[2]);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        if (editable) {\r\n            //Added or removed rows, TF rows number needs to be re-calculated\r\n            let fnE = cfg.on_added_dom_row;\r\n            cfg.on_added_dom_row = function () {\r\n                var args = arguments;\r\n                tf.nbFilterableRows++;\r\n                if (!tf.paging) {\r\n                    tf.emitter.emit('rows-changed', tf, this);\r\n                } else {\r\n                    tf.nbFilterableRows++;\r\n                    tf.paging = false;\r\n                    tf.feature('paging').destroy();\r\n                    tf.feature('paging').reset();\r\n                }\r\n                if (tf.alternateRows) {\r\n                    tf.feature('alternateRows').init();\r\n                }\r\n                if (fnE) {\r\n                    fnE.call(null, args[0], args[1], args[2]);\r\n                }\r\n            };\r\n            if (cfg.actions && cfg.actions['delete']) {\r\n                let fnF = cfg.actions['delete'].on_after_submit;\r\n                cfg.actions['delete'].on_after_submit = function () {\r\n                    var args = arguments;\r\n                    tf.nbFilterableRows--;\r\n                    if (!tf.paging) {\r\n                        tf.emitter.emit('rows-changed', tf, this);\r\n                    } else {\r\n                        tf.nbFilterableRows--;\r\n                        tf.paging = false;\r\n                        tf.feature('paging').destroy();\r\n                        tf.feature('paging').reset(false);\r\n                    }\r\n                    if (tf.alternateRows) {\r\n                        tf.feature('alternateRows').init();\r\n                    }\r\n                    if (fnF) {\r\n                        fnF.call(null, args[0], args[1]);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        try {\r\n            /* eslint-disable */\r\n            this._ezEditTable = new EditTable(tf.id, cfg, startRow);\r\n            this._ezEditTable.Init();\r\n            /* eslint-enable */\r\n        } catch (e) { throw new Error(INSTANTIATION_ERROR); }\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * Reset advanced grid when previously removed\r\n     */\r\n    reset() {\r\n        let ezEditTable = this._ezEditTable;\r\n        if (ezEditTable) {\r\n            if (this.cfg.selection) {\r\n                /* eslint-disable */\r\n                ezEditTable.Selection.Set();\r\n                /* eslint-enable */\r\n            }\r\n            if (this.cfg.editable) {\r\n                /* eslint-disable */\r\n                ezEditTable.Editable.Set();\r\n                /* eslint-enable */\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle behaviour\r\n     */\r\n    toggle() {\r\n        let ezEditTable = this._ezEditTable;\r\n        if (ezEditTable.editable) {\r\n            /* eslint-disable */\r\n            ezEditTable.Editable.Remove();\r\n            /* eslint-enable */\r\n        } else {\r\n            /* eslint-disable */\r\n            ezEditTable.Editable.Set();\r\n            /* eslint-enable */\r\n        }\r\n        if (ezEditTable.selection) {\r\n            /* eslint-disable */\r\n            ezEditTable.Selection.Remove();\r\n            /* eslint-enable */\r\n        } else {\r\n            /* eslint-disable */\r\n            ezEditTable.Selection.Set();\r\n            /* eslint-enable */\r\n        }\r\n    }\r\n\r\n    _toggleForInputFilter() {\r\n        let tf = this.tf;\r\n        if (!tf.getActiveFilterId()) {\r\n            return;\r\n        }\r\n        let colIndex = tf.getColumnIndexFromFilterId(tf.getActiveFilterId());\r\n        let filterType = tf.getFilterType(colIndex);\r\n        if (filterType === INPUT) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove advanced grid\r\n     */\r\n    destroy() {\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n        let ezEditTable = this._ezEditTable;\r\n        if (ezEditTable) {\r\n            if (this.cfg.selection) {\r\n                /* eslint-disable */\r\n                ezEditTable.Selection.ClearSelections();\r\n                ezEditTable.Selection.Remove();\r\n                /* eslint-enable */\r\n            }\r\n            if (this.cfg.editable) {\r\n                /* eslint-disable */\r\n                ezEditTable.Editable.Remove();\r\n                /* eslint-enable */\r\n            }\r\n        }\r\n\r\n        this.emitter.off(['filter-focus', 'filter-blur'],\r\n            () => this._toggleForInputFilter());\r\n        this.initialized = false;\r\n    }\r\n}\r\n","import AdapterSortableTable from './adapterSortabletable';\r\nimport {root} from '../../root';\r\n\r\nif (!root.SortableTable) {\r\n    require('script-loader!sortabletable');\r\n}\r\n\r\nexport default AdapterSortableTable;\r\n","import {Feature} from '../../feature';\r\nimport {createElm, removeElm, elm} from '../../dom';\r\nimport {EMPTY_FN, isNull} from '../../types';\r\nimport {addEvt} from '../../event';\r\nimport {\r\n    defaultsBool, defaultsStr, defaultsFn, defaultsNb,\r\n} from '../../settings';\r\nimport {RIGHT} from '../../modules/toolbar';\r\n\r\n/**\r\n * Filters Visibility extension\r\n */\r\nexport default class FiltersVisibility extends Feature {\r\n\r\n    /**\r\n     * Creates an instance of FiltersVisibility\r\n     * @param {TableFilter} tf TableFilter instance\r\n     * @param {Object} Configuration object\r\n     */\r\n    constructor(tf, f) {\r\n        super(tf, f.name);\r\n\r\n        /**\r\n         * Module name\r\n         * @type {String}\r\n         */\r\n        this.name = f.name;\r\n\r\n        /**\r\n         * Module description\r\n         * @type {String}\r\n         */\r\n        this.desc = defaultsStr(f.description,\r\n            'Filters row visibility manager');\r\n\r\n        /**\r\n         * Extension's stylesheet filename\r\n         * @type {String}\r\n         */\r\n        this.stylesheet = defaultsStr(f.stylesheet , 'filtersVisibility.css');\r\n\r\n        /**\r\n         * Expand icon filename\r\n         * @type {String}\r\n         */\r\n        this.icnExpand = defaultsStr(f.expand_icon_name, 'icn_exp.png');\r\n\r\n        /**\r\n         * Collapse icon filename\r\n         * @type {String}\r\n         */\r\n        this.icnCollapse = defaultsStr(f.collapse_icon_name, 'icn_clp.png');\r\n\r\n        /**\r\n         * Main container element\r\n         * @private\r\n         */\r\n        this.contEl = null;\r\n\r\n        /**\r\n         * Button element\r\n         * @private\r\n         */\r\n        this.btnEl = null;\r\n\r\n        /**\r\n         * Expand icon HTML\r\n         * @private\r\n         */\r\n        this.icnExpandHtml = '<img src=\"' + tf.themesPath + this.icnExpand +\r\n            '\" alt=\"Expand filters\" >';\r\n\r\n        /**\r\n         * Collapse icon HTML\r\n         * @private\r\n         */\r\n        this.icnCollapseHtml = '<img src=\"' + tf.themesPath + this.icnCollapse +\r\n            '\" alt=\"Collapse filters\" >';\r\n\r\n        /**\r\n         * Default text\r\n         * @private\r\n         */\r\n        this.defaultText = 'Toggle filters';\r\n\r\n        /**\r\n         * ID of main container element\r\n         * @type {String}\r\n         */\r\n        this.targetId = f.target_id || null;\r\n\r\n        /**\r\n         * Enable expand/collapse icon, defaults to true\r\n         * @type {Boolean}\r\n         */\r\n        this.enableIcon = defaultsBool(f.enable_icon, true);\r\n\r\n        /**\r\n         * Custom text for button\r\n         * @type {String}\r\n         */\r\n        this.btnText = defaultsStr(f.btn_text, '');\r\n\r\n        /**\r\n         * Collapse button HTML\r\n         * @private\r\n         */\r\n        this.collapseBtnHtml = this.enableIcon ?\r\n            this.icnCollapseHtml + this.btnText :\r\n            this.btnText || this.defaultText;\r\n\r\n        /**\r\n         * Expand button HTML\r\n         * @private\r\n         */\r\n        this.expandBtnHtml = this.enableIcon ?\r\n            this.icnExpandHtml + this.btnText :\r\n            this.btnText || this.defaultText;\r\n\r\n        /**\r\n         * Button's custom HTML\r\n         * @type {String}\r\n         */\r\n        this.btnHtml = defaultsStr(f.btn_html, null);\r\n\r\n        /**\r\n         * Css class for expand/collapse filters button\r\n         * @type {String}\r\n         */\r\n        this.btnCssClass = defaultsStr(f.btn_css_class, 'btnExpClpFlt');\r\n\r\n        /**\r\n         * Css class for main container\r\n         * @type {String}\r\n         */\r\n        this.contCssClass = defaultsStr(f.cont_css_class, 'expClpFlt');\r\n\r\n        /**\r\n         * Filters row index\r\n         * @type {Number}\r\n         */\r\n        this.filtersRowIndex = defaultsNb(f.filters_row_index,\r\n            tf.getFiltersRowIndex());\r\n\r\n        /**\r\n         * Make filters visible at initialization, defaults to true\r\n         * @type {Boolean}\r\n         */\r\n        this.visibleAtStart = defaultsNb(f.visible_at_start, true);\r\n\r\n        /**\r\n         * Default position in toolbar ('left'|'center'|'right')\r\n         * @type {String}\r\n         */\r\n        this.toolbarPosition = defaultsStr(f.toolbar_position, RIGHT);\r\n\r\n        /**\r\n         * Callback fired before filters row is shown\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeShow = defaultsFn(f.on_before_show, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after filters row is shown\r\n         * @type {Function}\r\n         */\r\n        this.onAfterShow = defaultsFn(f.on_after_show, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired before filters row is hidden\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeHide = defaultsFn(f.on_before_hide, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after filters row is hidden\r\n         * @type {Function}\r\n         */\r\n        this.onAfterHide = defaultsFn(f.on_after_hide, EMPTY_FN);\r\n\r\n        //Import extension's stylesheet\r\n        tf.import(f.name + 'Style', tf.getStylePath() + this.stylesheet, null,\r\n            'link');\r\n\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * Initialise extension\r\n     */\r\n    init() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n\r\n        this.emitter.emit('initializing-extension', this,\r\n            !isNull(this.targetId));\r\n\r\n        this.buildUI();\r\n\r\n        /** @inherited */\r\n        this.initialized = true;\r\n\r\n        this.emitter.on(['show-filters'], (tf, visible) => this.show(visible));\r\n        this.emitter.emit('filters-visibility-initialized', this.tf, this);\r\n        this.emitter.emit('extension-initialized', this);\r\n    }\r\n\r\n    /**\r\n     * Build UI elements\r\n     */\r\n    buildUI() {\r\n        let tf = this.tf;\r\n        let span = createElm('span');\r\n        span.className = this.contCssClass;\r\n\r\n        // Container element (rdiv or custom element)\r\n        let targetEl = !this.targetId ?\r\n            tf.feature('toolbar').container(this.toolbarPosition) :\r\n            elm(this.targetId);\r\n\r\n        if (!this.targetId) {\r\n            let firstChild = targetEl.firstChild;\r\n            firstChild.parentNode.insertBefore(span, firstChild);\r\n        } else {\r\n            targetEl.appendChild(span);\r\n        }\r\n\r\n        let btn;\r\n        if (!this.btnHtml) {\r\n            btn = createElm('a', ['href', 'javascript:void(0);']);\r\n            btn.className = this.btnCssClass;\r\n            btn.title = this.btnText || this.defaultText;\r\n            btn.innerHTML = this.collapseBtnHtml;\r\n            span.appendChild(btn);\r\n        } else { // Custom html\r\n            span.innerHTML = this.btnHtml;\r\n            btn = span.firstChild;\r\n        }\r\n\r\n        addEvt(btn, 'click', () => this.toggle());\r\n\r\n        this.contEl = span;\r\n        this.btnEl = btn;\r\n\r\n        if (!this.visibleAtStart) {\r\n            this.toggle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle filters visibility\r\n     */\r\n    toggle() {\r\n        let tf = this.tf;\r\n        let tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\r\n        let fltRow = tbl.rows[this.filtersRowIndex];\r\n        let isDisplayed = fltRow.style.display === '';\r\n\r\n        this.show(!isDisplayed);\r\n    }\r\n\r\n    /**\r\n     * Show or hide filters\r\n     *\r\n     * @param {boolean} [visible=true] Visibility flag\r\n     */\r\n    show(visible = true) {\r\n        let tf = this.tf;\r\n        let tbl = tf.gridLayout ? tf.feature('gridLayout').headTbl : tf.dom();\r\n        let fltRow = tbl.rows[this.filtersRowIndex];\r\n\r\n        if (visible) {\r\n            this.onBeforeShow(this);\r\n        }\r\n        if (!visible) {\r\n            this.onBeforeHide(this);\r\n        }\r\n\r\n        fltRow.style.display = visible ? '' : 'none';\r\n        if (this.enableIcon && !this.btnHtml) {\r\n            this.btnEl.innerHTML = visible ?\r\n                this.collapseBtnHtml : this.expandBtnHtml;\r\n        }\r\n\r\n        if (visible) {\r\n            this.onAfterShow(this);\r\n        }\r\n        if (!visible) {\r\n            this.onAfterHide(this);\r\n        }\r\n\r\n        this.emitter.emit('filters-toggled', tf, this, visible);\r\n    }\r\n\r\n    /**\r\n     * Destroy the UI\r\n     */\r\n    destroy() {\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n\r\n        this.emitter.off(['show-filters'], (tf, visible) => this.show(visible));\r\n\r\n        this.btnEl.innerHTML = '';\r\n        removeElm(this.btnEl);\r\n        this.btnEl = null;\r\n\r\n        this.contEl.innerHTML = '';\r\n        removeElm(this.contEl);\r\n        this.contEl = null;\r\n        this.initialized = false;\r\n    }\r\n\r\n}\r\n","import {Feature} from '../../feature';\r\nimport {\r\n    addClass, removeClass, createCheckItem, createElm, elm, removeElm,\r\n    getText, tag\r\n} from '../../dom';\r\nimport {isUndef, EMPTY_FN, isNull} from '../../types';\r\nimport {addEvt, targetEvt, removeEvt} from '../../event';\r\nimport {root} from '../../root';\r\nimport {NONE} from '../../const';\r\nimport {\r\n    defaultsBool, defaultsStr, defaultsFn, defaultsNb, defaultsArr\r\n} from '../../settings';\r\nimport {RIGHT} from '../../modules/toolbar';\r\n\r\n/**\r\n * Columns Visibility extension\r\n */\r\nexport default class ColsVisibility extends Feature {\r\n\r\n    /**\r\n     * Creates an instance of ColsVisibility\r\n     * @param {TableFilter} tf TableFilter instance\r\n     * @param {Object} Configuration object\r\n     */\r\n    constructor(tf, f) {\r\n        super(tf, f.name);\r\n\r\n        // Configuration object\r\n        let cfg = this.config;\r\n\r\n        /**\r\n         * Module name\r\n         * @type {String}\r\n         */\r\n        this.name = f.name;\r\n\r\n        /**\r\n         * Module description\r\n         * @type {String}\r\n         */\r\n        this.desc = defaultsStr(f.description, 'Columns visibility manager');\r\n\r\n        /**\r\n         * show/hide columns container element\r\n         * @private\r\n         */\r\n        this.spanEl = null;\r\n\r\n        /**\r\n         * show/hide columns button element\r\n         * @private\r\n         */\r\n        this.btnEl = null;\r\n\r\n        /**\r\n         * show/hide columns main container element\r\n         * @private\r\n         */\r\n        this.contEl = null;\r\n\r\n        /**\r\n         * Enable tick to hide a column, defaults to true\r\n         * @type {Boolean}\r\n         */\r\n        this.tickToHide = defaultsBool(f.tick_to_hide, true);\r\n\r\n        /**\r\n         * Enable columns manager UI, defaults to true\r\n         * @type {Boolean}\r\n         */\r\n        this.manager = defaultsBool(f.manager, true);\r\n\r\n        /**\r\n         * Headers HTML table reference only if headers are external\r\n         * @type {DOMElement}\r\n         */\r\n        this.headersTbl = f.headers_table || null;\r\n\r\n        /**\r\n         * Headers row index only if headers are external\r\n         * @type {Number}\r\n         */\r\n        this.headersIndex = defaultsNb(f.headers_index, 1);\r\n\r\n        /**\r\n         * ID of main container element\r\n         * @type {String}\r\n         */\r\n        this.contElTgtId = defaultsStr(f.container_target_id, null);\r\n\r\n        /**\r\n         * Alternative text for column headers in column manager UI\r\n         * @type {Array}\r\n         */\r\n        this.headersText = defaultsArr(f.headers_text, []);\r\n\r\n        /**\r\n         * ID of button's container element\r\n         * @type {String}\r\n         */\r\n        this.btnTgtId = defaultsStr(f.btn_target_id, null);\r\n\r\n        /**\r\n         * Button's text, defaults to Columns&#9660;\r\n         * @type {String}\r\n         */\r\n        this.btnText = defaultsStr(f.btn_text, 'Columns&#9660;');\r\n\r\n        /**\r\n         * Button's inner HTML\r\n         * @type {String}\r\n         */\r\n        this.btnHtml = defaultsStr(f.btn_html, null);\r\n\r\n        /**\r\n         * Css class for button\r\n         * @type {String}\r\n         */\r\n        this.btnCssClass = defaultsStr(f.btn_css_class, 'colVis');\r\n\r\n        /**\r\n         * Columns manager UI close link text, defaults to 'Close'\r\n         * @type {String}\r\n         */\r\n        this.btnCloseText = defaultsStr(f.btn_close_text, 'Close');\r\n\r\n        /**\r\n         * Columns manager UI close link HTML\r\n         * @type {String}\r\n         */\r\n        this.btnCloseHtml = defaultsStr(f.btn_close_html, null);\r\n\r\n        /**\r\n         * Css for columns manager UI close link\r\n         * @type {String}\r\n         */\r\n        this.btnCloseCssClass = defaultsStr(f.btn_close_css_class,\r\n            this.btnCssClass);\r\n\r\n        /**\r\n         * Extension's stylesheet filename\r\n         * @type {String}\r\n         */\r\n        this.stylesheet = defaultsStr(f.stylesheet, 'colsVisibility.css');\r\n\r\n        /**\r\n         * Css for columns manager UI span\r\n         * @type {String}\r\n         */\r\n        this.spanCssClass = defaultsStr(f.span_css_class, 'colVisSpan');\r\n\r\n        /**\r\n         * Css for columns manager UI main container\r\n         * @type {String}\r\n         */\r\n        this.contCssClass = defaultsStr(f.cont_css_class, 'colVisCont');\r\n\r\n        /**\r\n         * Css for columns manager UI checklist (ul)\r\n         * @type {String}\r\n         */\r\n        this.listCssClass = defaultsStr(cfg.list_css_class, 'cols_checklist');\r\n\r\n        /**\r\n         * Css for columns manager UI checklist item (li)\r\n         * @type {String}\r\n         */\r\n        this.listItemCssClass = defaultsStr(cfg.checklist_item_css_class,\r\n            'cols_checklist_item');\r\n\r\n        /**\r\n         * Css for columns manager UI checklist item selected state (li)\r\n         * @type {String}\r\n         */\r\n        this.listSlcItemCssClass = defaultsStr(\r\n            cfg.checklist_selected_item_css_class,\r\n            'cols_checklist_slc_item'\r\n        );\r\n\r\n        /**\r\n         * Text preceding the columns list, defaults to 'Hide' or 'Show'\r\n         * depending on tick mode (tick_to_hide option)\r\n         * @type {String}\r\n         */\r\n        this.text = defaultsStr(f.text, this.tickToHide ? 'Hide: ' : 'Show: ');\r\n\r\n        /**\r\n         * List of columns indexes to be hidden at initialization\r\n         * @type {Array}\r\n         */\r\n        this.atStart = defaultsArr(f.at_start, []);\r\n\r\n        /**\r\n         * Enable hover behaviour on columns manager button/link\r\n         * @type {Boolean}\r\n         */\r\n        this.enableHover = Boolean(f.enable_hover);\r\n\r\n        /**\r\n         * Enable select all option, disabled by default\r\n         * @type {Boolean}\r\n         */\r\n        this.enableTickAll = Boolean(f.enable_tick_all);\r\n\r\n        /**\r\n         * Text for select all option, defaults to 'Select all:'\r\n         * @type {String}\r\n         */\r\n        this.tickAllText = defaultsStr(f.tick_all_text, 'Select all:');\r\n\r\n        /**\r\n         * Default position in toolbar ('left'|'center'|'right')\r\n         * @type {String}\r\n         */\r\n        this.toolbarPosition = defaultsStr(f.toolbar_position, RIGHT);\r\n\r\n        /**\r\n         * List of indexes of hidden columns\r\n         * @private\r\n         */\r\n        this.hiddenCols = [];\r\n\r\n        /**\r\n         * Bound mouseup wrapper\r\n         * @private\r\n         */\r\n        this.boundMouseup = null;\r\n\r\n        /**\r\n         * Callback fired when the extension is initialized\r\n         * @type {Function}\r\n         */\r\n        this.onLoaded = defaultsFn(f.on_loaded, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired before the columns manager is opened\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeOpen = defaultsFn(f.on_before_open, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after the columns manager is opened\r\n         * @type {Function}\r\n         */\r\n        this.onAfterOpen = defaultsFn(f.on_after_open, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired before the columns manager is closed\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeClose = defaultsFn(f.on_before_close, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after the columns manager is closed\r\n         * @type {Function}\r\n         */\r\n        this.onAfterClose = defaultsFn(f.on_after_close, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired before a column is hidden\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeColHidden = defaultsFn(f.on_before_col_hidden, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after a column is hidden\r\n         * @type {Function}\r\n         */\r\n        this.onAfterColHidden = defaultsFn(f.on_after_col_hidden, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired before a column is displayed\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeColDisplayed = defaultsFn(f.on_before_col_displayed,\r\n            EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after a column is displayed\r\n         * @type {Function}\r\n         */\r\n        this.onAfterColDisplayed = defaultsFn(f.on_after_col_displayed,\r\n            EMPTY_FN);\r\n\r\n        //Grid layout support\r\n        if (tf.gridLayout) {\r\n            this.headersTbl = tf.feature('gridLayout').headTbl; //headers table\r\n            this.headersIndex = 0; //headers index\r\n        }\r\n\r\n        //Loads extension stylesheet\r\n        tf.import(f.name + 'Style', tf.getStylePath() + this.stylesheet, null,\r\n            'link');\r\n\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * Mouse-up event handler handling popup auto-close behaviour\r\n     * @private\r\n     */\r\n    onMouseup(evt) {\r\n        let targetElm = targetEvt(evt);\r\n\r\n        while (targetElm && targetElm !== this.contEl\r\n            && targetElm !== this.btnEl) {\r\n            targetElm = targetElm.parentNode;\r\n        }\r\n\r\n        if (targetElm !== this.contEl && targetElm !== this.btnEl) {\r\n            this.toggle();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Toggle columns manager UI\r\n     */\r\n    toggle() {\r\n        // ensure mouseup event handler is removed\r\n        removeEvt(root, 'mouseup', this.boundMouseup);\r\n\r\n        let contDisplay = this.contEl.style.display;\r\n\r\n        if (contDisplay !== 'inline') {\r\n            this.onBeforeOpen(this);\r\n        }\r\n        if (contDisplay === 'inline') {\r\n            this.onBeforeClose(this);\r\n        }\r\n\r\n        this.contEl.style.display = contDisplay === 'inline' ?\r\n            NONE : 'inline';\r\n\r\n        if (contDisplay !== 'inline') {\r\n            this.onAfterOpen(this);\r\n            addEvt(root, 'mouseup', this.boundMouseup);\r\n        }\r\n        if (contDisplay === 'inline') {\r\n            this.onAfterClose(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check an item in columns manager UI\r\n     * @private\r\n     */\r\n    checkItem(lbl) {\r\n        let li = lbl.parentNode;\r\n        if (!li || !lbl) {\r\n            return;\r\n        }\r\n        let isChecked = lbl.firstChild.checked;\r\n        let colIndex = lbl.firstChild.getAttribute('id').split('_')[1];\r\n        colIndex = parseInt(colIndex, 10);\r\n        if (isChecked) {\r\n            addClass(li, this.listSlcItemCssClass);\r\n        } else {\r\n            removeClass(li, this.listSlcItemCssClass);\r\n        }\r\n\r\n        let hide = false;\r\n        if ((this.tickToHide && isChecked) ||\r\n            (!this.tickToHide && !isChecked)) {\r\n            hide = true;\r\n        }\r\n        this.setHidden(colIndex, hide);\r\n    }\r\n\r\n    /**\r\n     * Initializes ColsVisibility instance\r\n     */\r\n    init() {\r\n        if (this.initialized || !this.manager) {\r\n            return;\r\n        }\r\n\r\n        this.emitter.emit('initializing-extension', this,\r\n            !isNull(this.btnTgtId));\r\n\r\n        this.emitter.on(['hide-column'],\r\n            (tf, colIndex) => this.hideCol(colIndex));\r\n\r\n        this.buildBtn();\r\n        this.buildManager();\r\n\r\n        /** @inherited */\r\n        this.initialized = true;\r\n\r\n        this.boundMouseup = this.onMouseup.bind(this);\r\n\r\n        this.emitter.emit('columns-visibility-initialized', this.tf, this);\r\n        this.emitter.emit('extension-initialized', this);\r\n\r\n        // Hide columns at start at very end of initialization, do not move\r\n        // as order is important\r\n        this._hideAtStart();\r\n    }\r\n\r\n    /**\r\n     * Build main button UI\r\n     */\r\n    buildBtn() {\r\n        if (this.btnEl) {\r\n            return;\r\n        }\r\n        let tf = this.tf;\r\n        let span = createElm('span');\r\n        span.className = this.spanCssClass;\r\n\r\n        // Container element (rdiv or custom element)\r\n        let targetEl = !this.btnTgtId ?\r\n            tf.feature('toolbar').container(this.toolbarPosition) :\r\n            elm(this.btnTgtId);\r\n\r\n        if (!this.btnTgtId) {\r\n            let firstChild = targetEl.firstChild;\r\n            firstChild.parentNode.insertBefore(span, firstChild);\r\n        } else {\r\n            targetEl.appendChild(span);\r\n        }\r\n\r\n        if (!this.btnHtml) {\r\n            let btn = createElm('a', ['href', 'javascript:;']);\r\n            btn.className = this.btnCssClass;\r\n            btn.title = this.desc;\r\n\r\n            btn.innerHTML = this.btnText;\r\n            span.appendChild(btn);\r\n            if (!this.enableHover) {\r\n                addEvt(btn, 'click', (evt) => this.toggle(evt));\r\n            } else {\r\n                addEvt(btn, 'mouseover', (evt) => this.toggle(evt));\r\n            }\r\n        } else { // Custom html\r\n            span.innerHTML = this.btnHtml;\r\n            let colVisEl = span.firstChild;\r\n            if (!this.enableHover) {\r\n                addEvt(colVisEl, 'click', (evt) => this.toggle(evt));\r\n            } else {\r\n                addEvt(colVisEl, 'mouseover', (evt) => this.toggle(evt));\r\n            }\r\n        }\r\n\r\n        this.spanEl = span;\r\n        this.btnEl = this.spanEl.firstChild;\r\n\r\n        this.onLoaded(this);\r\n    }\r\n\r\n    /**\r\n     * Build columns manager UI\r\n     */\r\n    buildManager() {\r\n        let tf = this.tf;\r\n\r\n        let container = !this.contElTgtId ?\r\n            createElm('div') :\r\n            elm(this.contElTgtId);\r\n        container.className = this.contCssClass;\r\n\r\n        //Extension description\r\n        let extNameLabel = createElm('p');\r\n        extNameLabel.innerHTML = this.text;\r\n        container.appendChild(extNameLabel);\r\n\r\n        //Headers list\r\n        let ul = createElm('ul');\r\n        ul.className = this.listCssClass;\r\n\r\n        let tbl = this.headersTbl || tf.dom();\r\n        let headerIndex = this.headersTbl ?\r\n            this.headersIndex : tf.getHeadersRowIndex();\r\n        let headerRow = tbl.rows[headerIndex];\r\n\r\n        //Tick all option\r\n        if (this.enableTickAll) {\r\n            let li = createCheckItem('col__' + tf.id, this.tickAllText,\r\n                this.tickAllText);\r\n            addClass(li, this.listItemCssClass);\r\n            ul.appendChild(li);\r\n            li.check.checked = !this.tickToHide;\r\n\r\n            addEvt(li.check, 'click', () => {\r\n                for (let h = 0; h < headerRow.cells.length; h++) {\r\n                    let itm = elm('col_' + h + '_' + tf.id);\r\n                    if (itm && li.check.checked !== itm.checked) {\r\n                        itm.click();\r\n                        itm.checked = li.check.checked;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < headerRow.cells.length; i++) {\r\n            let cell = headerRow.cells[i];\r\n            let cellText = this.headersText[i] || this._getHeaderText(cell);\r\n            let liElm = createCheckItem('col_' + i + '_' + tf.id, cellText,\r\n                cellText);\r\n            addClass(liElm, this.listItemCssClass);\r\n            if (!this.tickToHide) {\r\n                addClass(liElm, this.listSlcItemCssClass);\r\n            }\r\n            ul.appendChild(liElm);\r\n            if (!this.tickToHide) {\r\n                liElm.check.checked = true;\r\n            }\r\n\r\n            addEvt(liElm.check, 'click', (evt) => {\r\n                let elm = targetEvt(evt);\r\n                let lbl = elm.parentNode;\r\n                this.checkItem(lbl);\r\n            });\r\n        }\r\n\r\n        //separator\r\n        let p = createElm('p', ['align', 'center']);\r\n        let btn;\r\n        //Close link\r\n        if (!this.btnCloseHtml) {\r\n            btn = createElm('a', ['href', 'javascript:;']);\r\n            btn.className = this.btnCloseCssClass;\r\n            btn.innerHTML = this.btnCloseText;\r\n            addEvt(btn, 'click', (evt) => this.toggle(evt));\r\n            p.appendChild(btn);\r\n        } else {\r\n            p.innerHTML = this.btnCloseHtml;\r\n            btn = p.firstChild;\r\n            addEvt(btn, 'click', (evt) => this.toggle(evt));\r\n        }\r\n\r\n        container.appendChild(ul);\r\n        container.appendChild(p);\r\n\r\n        this.btnEl.parentNode.insertBefore(container, this.btnEl);\r\n        this.contEl = container;\r\n    }\r\n\r\n    /**\r\n     * Hide or show specified columns\r\n     * @param {Number} colIndex Column index\r\n     * @param {Boolean} hide    Hide column if true or show if false\r\n     */\r\n    setHidden(colIndex, hide) {\r\n        let tf = this.tf;\r\n        let tbl = tf.dom();\r\n\r\n        if (hide) {\r\n            this.onBeforeColHidden(this, colIndex);\r\n        } else {\r\n            this.onBeforeColDisplayed(this, colIndex);\r\n        }\r\n\r\n        this._hideElements(tbl, colIndex, hide);\r\n        if (this.headersTbl) {\r\n            this._hideElements(this.headersTbl, colIndex, hide);\r\n        }\r\n\r\n        let hiddenCols = this.hiddenCols;\r\n        let itemIndex = hiddenCols.indexOf(colIndex);\r\n        if (hide) {\r\n            if (itemIndex === -1) {\r\n                this.hiddenCols.push(colIndex);\r\n            }\r\n        } else {\r\n            if (itemIndex !== -1) {\r\n                this.hiddenCols.splice(itemIndex, 1);\r\n            }\r\n        }\r\n\r\n        if (hide) {\r\n            this.onAfterColHidden(this, colIndex);\r\n            this.emitter.emit('column-hidden', tf, this, colIndex,\r\n                this.hiddenCols);\r\n        } else {\r\n            this.onAfterColDisplayed(this, colIndex);\r\n            this.emitter.emit('column-shown', tf, this, colIndex,\r\n                this.hiddenCols);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show specified column\r\n     * @param  {Number} colIndex Column index\r\n     */\r\n    showCol(colIndex) {\r\n        if (isUndef(colIndex) || !this.isColHidden(colIndex)) {\r\n            return;\r\n        }\r\n        if (this.manager && this.contEl) {\r\n            let itm = elm('col_' + colIndex + '_' + this.tf.id);\r\n            if (itm) {\r\n                itm.click();\r\n            }\r\n        } else {\r\n            this.setHidden(colIndex, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide specified column\r\n     * @param  {Number} colIndex Column index\r\n     */\r\n    hideCol(colIndex) {\r\n        if (isUndef(colIndex) || this.isColHidden(colIndex)) {\r\n            return;\r\n        }\r\n        if (this.manager && this.contEl) {\r\n            let itm = elm('col_' + colIndex + '_' + this.tf.id);\r\n            if (itm) {\r\n                itm.click();\r\n            }\r\n        } else {\r\n            this.setHidden(colIndex, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if specified column is hidden\r\n     * @param  {Number} colIndex Column index\r\n     */\r\n    isColHidden(colIndex) {\r\n        if (this.hiddenCols.indexOf(colIndex) !== -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle visibility of specified column\r\n     * @param  {Number} colIndex Column index\r\n     */\r\n    toggleCol(colIndex) {\r\n        if (isUndef(colIndex) || this.isColHidden(colIndex)) {\r\n            this.showCol(colIndex);\r\n        } else {\r\n            this.hideCol(colIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the indexes of the columns currently hidden\r\n     * @return {Array} column indexes\r\n     */\r\n    getHiddenCols() {\r\n        return this.hiddenCols;\r\n    }\r\n\r\n    /**\r\n     * Remove the columns manager\r\n     */\r\n    destroy() {\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n        if (elm(this.contElTgtId)) {\r\n            elm(this.contElTgtId).innerHTML = '';\r\n        } else {\r\n            this.contEl.innerHTML = '';\r\n            removeElm(this.contEl);\r\n            this.contEl = null;\r\n        }\r\n        this.btnEl.innerHTML = '';\r\n        removeElm(this.btnEl);\r\n        this.btnEl = null;\r\n\r\n        this.emitter.off(['hide-column'],\r\n            (tf, colIndex) => this.hideCol(colIndex));\r\n\r\n        this.boundMouseup = null;\r\n\r\n        this.initialized = false;\r\n    }\r\n\r\n    _getHeaderText(cell) {\r\n        if (!cell.hasChildNodes) {\r\n            return '';\r\n        }\r\n\r\n        for (let i = 0; i < cell.childNodes.length; i++) {\r\n            let n = cell.childNodes[i];\r\n            if (n.nodeType === 3) {\r\n                return n.nodeValue;\r\n            } else if (n.nodeType === 1) {\r\n                if (n.id && n.id.indexOf('popUp') !== -1) {\r\n                    continue;\r\n                } else {\r\n                    return getText(n);\r\n                }\r\n            }\r\n            continue;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    _hideElements(tbl, colIdx, hide) {\r\n        this._hideCells(tbl, colIdx, hide);\r\n        this._hideCol(tbl, colIdx, hide);\r\n    }\r\n\r\n    _hideCells(tbl, colIdx, hide) {\r\n        for (let i = 0; i < tbl.rows.length; i++) {\r\n            let row = tbl.rows[i];\r\n            let cell = row.cells[colIdx];\r\n            if (cell) {\r\n                cell.style.display = hide ? NONE : '';\r\n            }\r\n        }\r\n    }\r\n\r\n    _hideCol(tbl, colIdx, hide) {\r\n        let colElms = tag(tbl, 'col');\r\n        if (colElms.length === 0) {\r\n            return;\r\n        }\r\n        colElms[colIdx].style.display = hide ? NONE : '';\r\n    }\r\n\r\n    _hideAtStart() {\r\n        this.atStart.forEach((colIdx) => {\r\n            this.hideCol(colIdx);\r\n        });\r\n    }\r\n}\r\n","import {Feature} from '../../feature';\r\nimport {createText, elm} from '../../dom';\r\nimport {isArray, isEmpty, EMPTY_FN} from '../../types';\r\nimport {numSortAsc} from '../../sort';\r\nimport {FORMATTED_NUMBER} from '../../const';\r\nimport formatNumber from 'format-number';\r\nimport {defaultsFn, defaultsArr} from '../../settings';\r\nimport {bound} from '../../event';\r\n\r\nconst EVENTS = [\r\n    'after-filtering',\r\n    'after-page-change',\r\n    'after-page-length-change'\r\n];\r\n\r\nconst SUM = 'sum';\r\nconst MEAN = 'mean';\r\nconst MIN = 'min';\r\nconst MAX = 'max';\r\nconst MEDIAN = 'median';\r\nconst Q1 = 'q1';\r\nconst Q3 = 'q3';\r\n\r\n/**\r\n * Column calculations extension\r\n */\r\nexport default class ColOps extends Feature {\r\n\r\n    /**\r\n     * Creates an instance of ColOps\r\n     *\r\n     * @param {TableFilter} tf TableFilter instance\r\n     * @param {Object} opts Configuration object\r\n     */\r\n    constructor(tf, opts) {\r\n        super(tf, opts.name);\r\n\r\n        /**\r\n         * Callback fired before columns operations start\r\n         * @type {Function}\r\n         */\r\n        this.onBeforeOperation = defaultsFn(opts.on_before_operation, EMPTY_FN);\r\n\r\n        /**\r\n         * Callback fired after columns operations are completed\r\n         * @type {Function}\r\n         */\r\n        this.onAfterOperation = defaultsFn(opts.on_after_operation, EMPTY_FN);\r\n\r\n        /**\r\n         * Configuration options\r\n         * @type {Object}\r\n         */\r\n        this.opts = opts;\r\n\r\n        /**\r\n         * List of DOM element IDs containing column's calculation result\r\n         * @type {Array}\r\n         */\r\n        this.labelIds = defaultsArr(opts.id, []);\r\n\r\n        /**\r\n         * List of columns' indexes for calculations\r\n         * @type {Array}\r\n         */\r\n        this.colIndexes = defaultsArr(opts.col, []);\r\n\r\n        /**\r\n         * List of operations - possible values: 'sum', 'mean', 'min', 'max',\r\n         * 'median', 'q1', 'q3'\r\n         * @type {Array}\r\n         */\r\n        this.operations = defaultsArr(opts.operation, []);\r\n\r\n        /**\r\n         * List of write methods used to write the result - possible values:\r\n         * 'innerHTML', 'setValue', 'createTextNode'\r\n         * @type {Array}\r\n         */\r\n        this.outputTypes = defaultsArr(opts.write_method, []);\r\n\r\n        /**\r\n         * List of format objects used for formatting the result -\r\n         * refer to https://github.com/componitable/format-number to check\r\n         * configuration options\r\n         * @type {Array}\r\n         */\r\n        this.formatResults = defaultsArr(opts.format_result, []);\r\n\r\n        /**\r\n         * List of row indexes displaying the results\r\n         * @type {Array}\r\n         */\r\n        this.totRowIndexes = defaultsArr(opts.tot_row_index, []);\r\n\r\n        /**\r\n         * List of row indexes excluded from calculations\r\n         * @type {Array}\r\n         */\r\n        this.excludeRows = defaultsArr(opts.exclude_row, []);\r\n\r\n        /**\r\n         * List of decimal precision for calculation results\r\n         * @type {Array}\r\n         */\r\n        this.decimalPrecisions = defaultsArr(opts.decimal_precision, 2);\r\n\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * Initializes ColOps instance\r\n     */\r\n    init() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        // subscribe to events\r\n        this.emitter.on(EVENTS, bound(this.calcAll, this));\r\n\r\n        this.calcAll();\r\n\r\n        /** @inherited */\r\n        this.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * Calculates columns' values\r\n     * Configuration options are stored in 'opts' property\r\n     * - 'id' contains ids of elements showing result (array)\r\n     * - 'col' contains the columns' indexes (array)\r\n     * - 'operation' contains operation type (array, values: 'sum', 'mean',\r\n     *   'min', 'max', 'median', 'q1', 'q3')\r\n     * - 'write_method' array defines which method to use for displaying the\r\n     *    result (innerHTML, setValue, createTextNode) - default: 'innerHTML'\r\n     * - 'tot_row_index' defines in which row results are displayed\r\n     *   (integers array)\r\n     *\r\n     * - changes made by Nuovella:\r\n     * (1) optimized the routine (now it will only process each column once),\r\n     * (2) added calculations for the median, lower and upper quartile.\r\n     */\r\n    calcAll() {\r\n        let tf = this.tf;\r\n        if (!tf.isInitialized()) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeOperation(tf, this);\r\n        this.emitter.emit('before-column-operation', tf, this);\r\n\r\n        let { colIndexes, operations: colOperations, outputTypes,\r\n            totRowIndexes, excludeRows, formatResults,\r\n            decimalPrecisions } = this;\r\n\r\n        //nuovella: determine unique list of columns to operate on\r\n        let uIndexes = [];\r\n        colIndexes.forEach((val) => {\r\n            if (uIndexes.indexOf(val) === -1) {\r\n                uIndexes.push(val);\r\n            }\r\n        });\r\n\r\n        let nbCols = uIndexes.length,\r\n            rows = tf.dom().rows,\r\n            colValues = [];\r\n\r\n        for (let u = 0; u < nbCols; u++) {\r\n            //this retrieves col values\r\n            //use uIndexes because we only want to pass through this loop\r\n            //once for each column get the values in this unique column\r\n            colValues.push(\r\n                tf.getVisibleColumnData(uIndexes[u], false, excludeRows)\r\n            );\r\n\r\n            let curValues = colValues[u];\r\n\r\n            //next: calculate all operations for this column\r\n            let result = 0,\r\n                operations = [],\r\n                precisions = [],\r\n                labels = [],\r\n                writeType,\r\n                formatResult = [],\r\n                idx = 0;\r\n\r\n            for (let k = 0; k < colIndexes.length; k++) {\r\n                if (colIndexes[k] !== uIndexes[u]) {\r\n                    continue;\r\n                }\r\n                operations[idx] = (colOperations[k] || 'sum').toLowerCase();\r\n                precisions[idx] = decimalPrecisions[k];\r\n                labels[idx] = this.labelIds[k];\r\n                writeType = isArray(outputTypes) ? outputTypes[k] : null;\r\n                formatResult[idx] =\r\n                    this.configureFormat(uIndexes[u], formatResults[k]);\r\n                idx++;\r\n            }\r\n\r\n            for (let i = 0; i < idx; i++) {\r\n                // emit values before column calculation\r\n                this.emitter.emit(\r\n                    'before-column-calc',\r\n                    tf,\r\n                    this,\r\n                    uIndexes[u],\r\n                    curValues,\r\n                    operations[i],\r\n                    precisions[i]\r\n                );\r\n\r\n                result = Number(this.calc(curValues, operations[i], null));\r\n\r\n                // emit column calculation result\r\n                this.emitter.emit(\r\n                    'column-calc',\r\n                    tf,\r\n                    this,\r\n                    uIndexes[u],\r\n                    result,\r\n                    operations[i],\r\n                    precisions[i]\r\n                );\r\n\r\n                // write result in expected DOM element\r\n                this.writeResult(\r\n                    result,\r\n                    labels[i],\r\n                    writeType,\r\n                    precisions[i],\r\n                    formatResult[i]\r\n                );\r\n\r\n            }//for i\r\n\r\n            // row(s) with result are always visible\r\n            let totRow = totRowIndexes && totRowIndexes[u] ?\r\n                rows[totRowIndexes[u]] : null;\r\n            if (totRow) {\r\n                totRow.style.display = '';\r\n            }\r\n        }//for u\r\n\r\n        this.onAfterOperation(tf, this);\r\n        this.emitter.emit('after-column-operation', tf, this);\r\n    }\r\n\r\n    /**\r\n     * Make desired calculation on specified column.\r\n     * @param {Number} colIndex Column index\r\n     * @param {String} [operation=SUM] Operation type\r\n     * @param {Number} precision Decimal precision\r\n     * @returns {Number}\r\n     */\r\n    columnCalc(colIndex, operation = SUM, precision) {\r\n        let excludeRows = this.excludeRows || [];\r\n        let colValues = tf.getVisibleColumnData(colIndex, false, excludeRows);\r\n\r\n        return Number(this.calc(colValues, operation, precision));\r\n    }\r\n\r\n    /**\r\n     * Make calculation on passed values.\r\n     * @param {Array} values List of values\r\n     * @param {String} [operation=SUM] Optional operation type\r\n     * @param {Number} precision Optional result precision\r\n     * @returns {Number}\r\n     * @private\r\n     */\r\n    calc(colValues, operation = SUM, precision) {\r\n        let result = 0;\r\n\r\n        if (operation === Q1 || operation === Q3 || operation === MEDIAN) {\r\n            colValues = this.sortColumnValues(colValues, numSortAsc);\r\n        }\r\n\r\n        switch (operation) {\r\n            case MEAN:\r\n                result = this.calcMean(colValues);\r\n                break;\r\n            case SUM:\r\n                result = this.calcSum(colValues);\r\n                break;\r\n            case MIN:\r\n                result = this.calcMin(colValues);\r\n                break;\r\n            case MAX:\r\n                result = this.calcMax(colValues);\r\n                break;\r\n            case MEDIAN:\r\n                result = this.calcMedian(colValues);\r\n                break;\r\n            case Q1:\r\n                result = this.calcQ1(colValues);\r\n                break;\r\n            case Q3:\r\n                result = this.calcQ3(colValues);\r\n                break;\r\n        }\r\n\r\n        return isEmpty(precision) ? result : result.toFixed(precision);\r\n    }\r\n\r\n    /**\r\n     * Calculate the sum of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcSum(values = []) {\r\n        if (isEmpty(values)) {\r\n            return 0;\r\n        }\r\n        let result = values.reduce((x, y) => Number(x) + Number(y));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculate the mean of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcMean(values = []) {\r\n        let result = this.calcSum(values) / values.length;\r\n        return Number(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate the max value of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcMax(values = []) {\r\n        return Math.max.apply(null, values);\r\n    }\r\n\r\n    /**\r\n     * Calculate the min value of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcMin(values = []) {\r\n        return Math.min.apply(null, values);\r\n    }\r\n\r\n    /**\r\n     * Calculate the median of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcMedian(values = []) {\r\n        let nbValues = values.length;\r\n        let aux = 0;\r\n        if (nbValues % 2 === 1) {\r\n            aux = Math.floor(nbValues / 2);\r\n            return Number(values[aux]);\r\n        }\r\n        return (Number(values[nbValues / 2]) +\r\n            Number(values[((nbValues / 2) - 1)])) / 2;\r\n    }\r\n\r\n    /**\r\n     * Calculate the lower quartile of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcQ1(values = []) {\r\n        let nbValues = values.length;\r\n        let posa = 0.0;\r\n        posa = Math.floor(nbValues / 4);\r\n        if (4 * posa === nbValues) {\r\n            return (Number(values[posa - 1]) +\r\n                Number(values[posa])) / 2;\r\n        }\r\n        return Number(values[posa]);\r\n    }\r\n\r\n    /**\r\n     * Calculate the upper quartile of passed values.\r\n     * @param {Array} [values=[]] List of values\r\n     * @returns {Number}\r\n     */\r\n    calcQ3(values = []) {\r\n        let nbValues = values.length;\r\n        let posa = 0.0;\r\n        let posb = 0.0;\r\n        posa = Math.floor(nbValues / 4);\r\n        if (4 * posa === nbValues) {\r\n            posb = 3 * posa;\r\n            return (Number(values[posb]) +\r\n                Number(values[posb - 1])) / 2;\r\n        }\r\n        return Number(values[nbValues - posa - 1]);\r\n    }\r\n\r\n    /**\r\n     * Sort passed values with supplied sorter function.\r\n     * @param {Array} [values=[]] List of values to be sorted\r\n     * @param {Function} sorter Sorter function\r\n     * @returns {Array}\r\n     */\r\n    sortColumnValues(values = [], sorter) {\r\n        return values.sort(sorter);\r\n    }\r\n\r\n    /**\r\n     * Write calculation result in passed DOM element with supplied write method\r\n     * and decimal precision.\r\n     * @param {Number} [result=0] Calculation result\r\n     * @param {DOMElement} label DOM element\r\n     * @param {String} [writeType='innerhtml'] Write method\r\n     * @param {Number} [precision=2] Applied decimal precision\r\n     * @private\r\n     */\r\n    writeResult(result = 0, label, writeType = 'innerhtml',\r\n        precision = 2, format = {}) {\r\n        let labelElm = elm(label);\r\n\r\n        if (!labelElm) {\r\n            return;\r\n        }\r\n\r\n        result = result.toFixed(precision);\r\n        if (isNaN(result) || !isFinite(result)) {\r\n            result = '';\r\n        } else {\r\n            result = formatNumber(format)(result);\r\n        }\r\n\r\n        switch (writeType.toLowerCase()) {\r\n            case 'innerhtml':\r\n                labelElm.innerHTML = result;\r\n                break;\r\n            case 'setvalue':\r\n                labelElm.value = result;\r\n                break;\r\n            case 'createtextnode':\r\n                let oldNode = labelElm.firstChild;\r\n                let txtNode = createText(result);\r\n                labelElm.replaceChild(txtNode, oldNode);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configure the format options used to format the operation result based\r\n     * on column type.\r\n     * @param {Number} colIndex Column index\r\n     * @param {Object} [format={}] Format object\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    configureFormat(colIndex, format = {}) {\r\n        let tf = this.tf;\r\n        if (tf.hasType(colIndex, [FORMATTED_NUMBER])) {\r\n            let colType = tf.colTypes[colIndex];\r\n            if (colType.decimal && !format.decimal) {\r\n                format.decimal = colType.decimal;\r\n            }\r\n            if (colType.thousands && !format.integerSeparator) {\r\n                format.integerSeparator = colType.thousands;\r\n            }\r\n        } else {\r\n            format.decimal = format.decimal || '';\r\n            format.integerSeparator = format.integerSeparator || '';\r\n        }\r\n        return format;\r\n    }\r\n\r\n    /** Remove extension */\r\n    destroy() {\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n        // unsubscribe to events\r\n        this.emitter.off(EVENTS, bound(this.calcAll, this));\r\n\r\n        this.initialized = false;\r\n    }\r\n\r\n}\r\n","import AdapterEzEditTable from './adapterEzEditTable';\r\n\r\nexport default AdapterEzEditTable;","module.exports = \"/*----------------------------------------------------------------------------\\\\\\r\\n|                            Sortable Table 1.12                              |\\r\\n|-----------------------------------------------------------------------------|\\r\\n|                         Created by Erik Arvidsson                           |\\r\\n|                  (http://webfx.eae.net/contact.html#erik)                   |\\r\\n|                      For WebFX (http://webfx.eae.net/)                      |\\r\\n|-----------------------------------------------------------------------------|\\r\\n| A DOM 1 based script that allows an ordinary HTML table to be sortable.     |\\r\\n|-----------------------------------------------------------------------------|\\r\\n|                  Copyright (c) 1998 - 2006 Erik Arvidsson                   |\\r\\n|-----------------------------------------------------------------------------|\\r\\n| Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not |\\r\\n| use this file except in compliance with the License.  You may obtain a copy |\\r\\n| of the License at http://www.apache.org/licenses/LICENSE-2.0                |\\r\\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |\\r\\n| Unless  required  by  applicable law or  agreed  to  in  writing,  software |\\r\\n| distributed under the License is distributed on an  \\\"AS IS\\\" BASIS,  WITHOUT |\\r\\n| WARRANTIES OR  CONDITIONS OF ANY KIND,  either express or implied.  See the |\\r\\n| License  for the  specific language  governing permissions  and limitations |\\r\\n| under the License.                                                          |\\r\\n|-----------------------------------------------------------------------------|\\r\\n| 2003-01-10 | First version                                                  |\\r\\n| 2003-01-19 | Minor changes to the date parsing                              |\\r\\n| 2003-01-28 | JScript 5.0 fixes (no support for 'in' operator)               |\\r\\n| 2003-02-01 | Sloppy typo like error fixed in getInnerText                   |\\r\\n| 2003-07-04 | Added workaround for IE cellIndex bug.                         |\\r\\n| 2003-11-09 | The bDescending argument to sort was not correctly working     |\\r\\n|            | Using onclick DOM0 event if no support for addEventListener    |\\r\\n|            | or attachEvent                                                 |\\r\\n| 2004-01-13 | Adding addSortType and removeSortType which makes it a lot     |\\r\\n|            | easier to add new, custom sort types.                          |\\r\\n| 2004-01-27 | Switch to use descending = false as the default sort order.    |\\r\\n|            | Change defaultDescending to suit your needs.                   |\\r\\n| 2004-03-14 | Improved sort type None look and feel a bit                    |\\r\\n| 2004-08-26 | Made the handling of tBody and tHead more flexible. Now you    |\\r\\n|            | can use another tHead or no tHead, and you can chose some      |\\r\\n|            | other tBody.                                                   |\\r\\n| 2006-04-25 | Changed license to Apache Software License 2.0                 |\\r\\n|-----------------------------------------------------------------------------|\\r\\n| Created 2003-01-10 | All changes are in the log above. | Updated 2006-04-25 |\\r\\n\\\\----------------------------------------------------------------------------*/\\r\\n\\r\\n\\r\\nfunction SortableTable(oTable, oSortTypes) {\\r\\n\\r\\n\\tthis.sortTypes = oSortTypes || [];\\r\\n\\r\\n\\tthis.sortColumn = null;\\r\\n\\tthis.descending = null;\\r\\n\\r\\n\\tvar oThis = this;\\r\\n\\tthis._headerOnclick = function (e) {\\r\\n\\t\\toThis.headerOnclick(e);\\r\\n\\t};\\r\\n\\r\\n\\tif (oTable) {\\r\\n\\t\\tthis.setTable( oTable );\\r\\n\\t\\tthis.document = oTable.ownerDocument || oTable.document;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\tthis.document = document;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// only IE needs this\\r\\n\\tvar win = this.document.defaultView || this.document.parentWindow;\\r\\n\\tthis._onunload = function () {\\r\\n\\t\\toThis.destroy();\\r\\n\\t};\\r\\n\\tif (win && typeof win.attachEvent != \\\"undefined\\\") {\\r\\n\\t\\twin.attachEvent(\\\"onunload\\\", this._onunload);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nSortableTable.gecko = navigator.product == \\\"Gecko\\\";\\r\\nSortableTable.msie = /msie/i.test(navigator.userAgent);\\r\\n// Mozilla is faster when doing the DOM manipulations on\\r\\n// an orphaned element. MSIE is not\\r\\nSortableTable.removeBeforeSort = SortableTable.gecko;\\r\\n\\r\\nSortableTable.prototype.onsort = function () {};\\r\\n\\r\\n// default sort order. true -> descending, false -> ascending\\r\\nSortableTable.prototype.defaultDescending = false;\\r\\n\\r\\n// shared between all instances. This is intentional to allow external files\\r\\n// to modify the prototype\\r\\nSortableTable.prototype._sortTypeInfo = {};\\r\\n\\r\\nSortableTable.prototype.setTable = function (oTable) {\\r\\n\\tif ( this.tHead )\\r\\n\\t\\tthis.uninitHeader();\\r\\n\\tthis.element = oTable;\\r\\n\\tthis.setTHead( oTable.tHead );\\r\\n\\tthis.setTBody( oTable.tBodies[0] );\\r\\n};\\r\\n\\r\\nSortableTable.prototype.setTHead = function (oTHead) {\\r\\n\\tif (this.tHead && this.tHead != oTHead )\\r\\n\\t\\tthis.uninitHeader();\\r\\n\\tthis.tHead = oTHead;\\r\\n\\tthis.initHeader( this.sortTypes );\\r\\n};\\r\\n\\r\\nSortableTable.prototype.setTBody = function (oTBody) {\\r\\n\\tthis.tBody = oTBody;\\r\\n};\\r\\n\\r\\nSortableTable.prototype.setSortTypes = function ( oSortTypes ) {\\r\\n\\tif ( this.tHead )\\r\\n\\t\\tthis.uninitHeader();\\r\\n\\tthis.sortTypes = oSortTypes || [];\\r\\n\\tif ( this.tHead )\\r\\n\\t\\tthis.initHeader( this.sortTypes );\\r\\n};\\r\\n\\r\\n// adds arrow containers and events\\r\\n// also binds sort type to the header cells so that reordering columns does\\r\\n// not break the sort types\\r\\nSortableTable.prototype.initHeader = function (oSortTypes) {\\r\\n\\tif (!this.tHead) return;\\r\\n\\tvar cells = this.tHead.rows[0].cells;\\r\\n\\tvar doc = this.tHead.ownerDocument || this.tHead.document;\\r\\n\\tthis.sortTypes = oSortTypes || [];\\r\\n\\tvar l = cells.length;\\r\\n\\tvar img, c;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\tc = cells[i];\\r\\n\\t\\tif (this.sortTypes[i] != null && this.sortTypes[i] != \\\"None\\\") {\\r\\n\\t\\t\\timg = doc.createElement(\\\"IMG\\\");\\r\\n\\t\\t\\timg.src = \\\"images/blank.png\\\";\\r\\n\\t\\t\\tc.appendChild(img);\\r\\n\\t\\t\\tif (this.sortTypes[i] != null)\\r\\n\\t\\t\\t\\tc._sortType = this.sortTypes[i];\\r\\n\\t\\t\\tif (typeof c.addEventListener != \\\"undefined\\\")\\r\\n\\t\\t\\t\\tc.addEventListener(\\\"click\\\", this._headerOnclick, false);\\r\\n\\t\\t\\telse if (typeof c.attachEvent != \\\"undefined\\\")\\r\\n\\t\\t\\t\\tc.attachEvent(\\\"onclick\\\", this._headerOnclick);\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\tc.onclick = this._headerOnclick;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\tc.setAttribute( \\\"_sortType\\\", oSortTypes[i] );\\r\\n\\t\\t\\tc._sortType = \\\"None\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tthis.updateHeaderArrows();\\r\\n};\\r\\n\\r\\n// remove arrows and events\\r\\nSortableTable.prototype.uninitHeader = function () {\\r\\n\\tif (!this.tHead) return;\\r\\n\\tvar cells = this.tHead.rows[0].cells;\\r\\n\\tvar l = cells.length;\\r\\n\\tvar c;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\tc = cells[i];\\r\\n\\t\\tif (c._sortType != null && c._sortType != \\\"None\\\") {\\r\\n\\t\\t\\tc.removeChild(c.lastChild);\\r\\n\\t\\t\\tif (typeof c.removeEventListener != \\\"undefined\\\")\\r\\n\\t\\t\\t\\tc.removeEventListener(\\\"click\\\", this._headerOnclick, false);\\r\\n\\t\\t\\telse if (typeof c.detachEvent != \\\"undefined\\\")\\r\\n\\t\\t\\t\\tc.detachEvent(\\\"onclick\\\", this._headerOnclick);\\r\\n\\t\\t\\tc._sortType = null;\\r\\n\\t\\t\\tc.removeAttribute( \\\"_sortType\\\" );\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSortableTable.prototype.updateHeaderArrows = function () {\\r\\n\\tif (!this.tHead) return;\\r\\n\\tvar cells = this.tHead.rows[0].cells;\\r\\n\\tvar l = cells.length;\\r\\n\\tvar img;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\tif (cells[i]._sortType != null && cells[i]._sortType != \\\"None\\\") {\\r\\n\\t\\t\\timg = cells[i].lastChild;\\r\\n\\t\\t\\tif (i == this.sortColumn)\\r\\n\\t\\t\\t\\timg.className = \\\"sort-arrow \\\" + (this.descending ? \\\"descending\\\" : \\\"ascending\\\");\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\timg.className = \\\"sort-arrow\\\";\\r\\n\\t\\t}\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSortableTable.prototype.headerOnclick = function (e) {\\r\\n\\t// find TD element\\r\\n\\tvar el = e.target || e.srcElement;\\r\\n\\twhile (el.tagName != \\\"TD\\\")\\r\\n\\t\\tel = el.parentNode;\\r\\n\\r\\n\\tthis.sort(SortableTable.msie ? SortableTable.getCellIndex(el) : el.cellIndex);\\r\\n};\\r\\n\\r\\n// IE returns wrong cellIndex when columns are hidden\\r\\nSortableTable.getCellIndex = function (oTd) {\\r\\n\\tvar cells = oTd.parentNode.childNodes\\r\\n\\tvar l = cells.length;\\r\\n\\tvar i;\\r\\n\\tfor (i = 0; cells[i] != oTd && i < l; i++)\\r\\n\\t\\t;\\r\\n\\treturn i;\\r\\n};\\r\\n\\r\\nSortableTable.prototype.getSortType = function (nColumn) {\\r\\n\\treturn this.sortTypes[nColumn] || \\\"String\\\";\\r\\n};\\r\\n\\r\\n// only nColumn is required\\r\\n// if bDescending is left out the old value is taken into account\\r\\n// if sSortType is left out the sort type is found from the sortTypes array\\r\\n\\r\\nSortableTable.prototype.sort = function (nColumn, bDescending, sSortType) {\\r\\n\\tif (!this.tBody) return;\\r\\n\\tif (sSortType == null)\\r\\n\\t\\tsSortType = this.getSortType(nColumn);\\r\\n\\r\\n\\t// exit if None\\r\\n\\tif (sSortType == \\\"None\\\")\\r\\n\\t\\treturn;\\r\\n\\r\\n\\tif (bDescending == null) {\\r\\n\\t\\tif (this.sortColumn != nColumn)\\r\\n\\t\\t\\tthis.descending = this.defaultDescending;\\r\\n\\t\\telse\\r\\n\\t\\t\\tthis.descending = !this.descending;\\r\\n\\t}\\r\\n\\telse\\r\\n\\t\\tthis.descending = bDescending;\\r\\n\\r\\n\\tthis.sortColumn = nColumn;\\r\\n\\r\\n\\tif (typeof this.onbeforesort == \\\"function\\\")\\r\\n\\t\\tthis.onbeforesort();\\r\\n\\r\\n\\tvar f = this.getSortFunction(sSortType, nColumn);\\r\\n\\tvar a = this.getCache(sSortType, nColumn);\\r\\n\\tvar tBody = this.tBody;\\r\\n\\r\\n\\ta.sort(f);\\r\\n\\r\\n\\tif (this.descending)\\r\\n\\t\\ta.reverse();\\r\\n\\r\\n\\tif (SortableTable.removeBeforeSort) {\\r\\n\\t\\t// remove from doc\\r\\n\\t\\tvar nextSibling = tBody.nextSibling;\\r\\n\\t\\tvar p = tBody.parentNode;\\r\\n\\t\\tp.removeChild(tBody);\\r\\n\\t}\\r\\n\\r\\n\\t// insert in the new order\\r\\n\\tvar l = a.length;\\r\\n\\tfor (var i = 0; i < l; i++)\\r\\n\\t\\ttBody.appendChild(a[i].element);\\r\\n\\r\\n\\tif (SortableTable.removeBeforeSort) {\\r\\n\\t\\t// insert into doc\\r\\n\\t\\tp.insertBefore(tBody, nextSibling);\\r\\n\\t}\\r\\n\\r\\n\\tthis.updateHeaderArrows();\\r\\n\\r\\n\\tthis.destroyCache(a);\\r\\n\\r\\n\\tif (typeof this.onsort == \\\"function\\\")\\r\\n\\t\\tthis.onsort();\\r\\n};\\r\\n\\r\\nSortableTable.prototype.asyncSort = function (nColumn, bDescending, sSortType) {\\r\\n\\tvar oThis = this;\\r\\n\\tthis._asyncsort = function () {\\r\\n\\t\\toThis.sort(nColumn, bDescending, sSortType);\\r\\n\\t};\\r\\n\\twindow.setTimeout(this._asyncsort, 1);\\r\\n};\\r\\n\\r\\nSortableTable.prototype.getCache = function (sType, nColumn) {\\r\\n\\tif (!this.tBody) return [];\\r\\n\\tvar rows = this.tBody.rows;\\r\\n\\tvar l = rows.length;\\r\\n\\tvar a = new Array(l);\\r\\n\\tvar r;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\tr = rows[i];\\r\\n\\t\\ta[i] = {\\r\\n\\t\\t\\tvalue:\\t\\tthis.getRowValue(r, sType, nColumn),\\r\\n\\t\\t\\telement:\\tr\\r\\n\\t\\t};\\r\\n\\t};\\r\\n\\treturn a;\\r\\n};\\r\\n\\r\\nSortableTable.prototype.destroyCache = function (oArray) {\\r\\n\\tvar l = oArray.length;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\toArray[i].value = null;\\r\\n\\t\\toArray[i].element = null;\\r\\n\\t\\toArray[i] = null;\\r\\n\\t}\\r\\n};\\r\\n\\r\\nSortableTable.prototype.getRowValue = function (oRow, sType, nColumn) {\\r\\n\\t// if we have defined a custom getRowValue use that\\r\\n\\tif (this._sortTypeInfo[sType] && this._sortTypeInfo[sType].getRowValue)\\r\\n\\t\\treturn this._sortTypeInfo[sType].getRowValue(oRow, nColumn);\\r\\n\\r\\n\\tvar s;\\r\\n\\tvar c = oRow.cells[nColumn];\\r\\n\\tif (typeof c.innerText != \\\"undefined\\\")\\r\\n\\t\\ts = c.innerText;\\r\\n\\telse\\r\\n\\t\\ts = SortableTable.getInnerText(c);\\r\\n\\treturn this.getValueFromString(s, sType);\\r\\n};\\r\\n\\r\\nSortableTable.getInnerText = function (oNode) {\\r\\n\\tvar s = \\\"\\\";\\r\\n\\tvar cs = oNode.childNodes;\\r\\n\\tvar l = cs.length;\\r\\n\\tfor (var i = 0; i < l; i++) {\\r\\n\\t\\tswitch (cs[i].nodeType) {\\r\\n\\t\\t\\tcase 1: //ELEMENT_NODE\\r\\n\\t\\t\\t\\ts += SortableTable.getInnerText(cs[i]);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 3:\\t//TEXT_NODE\\r\\n\\t\\t\\t\\ts += cs[i].nodeValue;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn s;\\r\\n};\\r\\n\\r\\nSortableTable.prototype.getValueFromString = function (sText, sType) {\\r\\n\\tif (this._sortTypeInfo[sType])\\r\\n\\t\\treturn this._sortTypeInfo[sType].getValueFromString( sText );\\r\\n\\treturn sText;\\r\\n\\t/*\\r\\n\\tswitch (sType) {\\r\\n\\t\\tcase \\\"Number\\\":\\r\\n\\t\\t\\treturn Number(sText);\\r\\n\\t\\tcase \\\"CaseInsensitiveString\\\":\\r\\n\\t\\t\\treturn sText.toUpperCase();\\r\\n\\t\\tcase \\\"Date\\\":\\r\\n\\t\\t\\tvar parts = sText.split(\\\"-\\\");\\r\\n\\t\\t\\tvar d = new Date(0);\\r\\n\\t\\t\\td.setFullYear(parts[0]);\\r\\n\\t\\t\\td.setDate(parts[2]);\\r\\n\\t\\t\\td.setMonth(parts[1] - 1);\\r\\n\\t\\t\\treturn d.valueOf();\\r\\n\\t}\\r\\n\\treturn sText;\\r\\n\\t*/\\r\\n\\t};\\r\\n\\r\\nSortableTable.prototype.getSortFunction = function (sType, nColumn) {\\r\\n\\tif (this._sortTypeInfo[sType])\\r\\n\\t\\treturn this._sortTypeInfo[sType].compare;\\r\\n\\treturn SortableTable.basicCompare;\\r\\n};\\r\\n\\r\\nSortableTable.prototype.destroy = function () {\\r\\n\\tthis.uninitHeader();\\r\\n\\tvar win = this.document.parentWindow;\\r\\n\\tif (win && typeof win.detachEvent != \\\"undefined\\\") {\\t// only IE needs this\\r\\n\\t\\twin.detachEvent(\\\"onunload\\\", this._onunload);\\r\\n\\t}\\r\\n\\tthis._onunload = null;\\r\\n\\tthis.element = null;\\r\\n\\tthis.tHead = null;\\r\\n\\tthis.tBody = null;\\r\\n\\tthis.document = null;\\r\\n\\tthis._headerOnclick = null;\\r\\n\\tthis.sortTypes = null;\\r\\n\\tthis._asyncsort = null;\\r\\n\\tthis.onsort = null;\\r\\n};\\r\\n\\r\\n// Adds a sort type to all instance of SortableTable\\r\\n// sType : String - the identifier of the sort type\\r\\n// fGetValueFromString : function ( s : string ) : T - A function that takes a\\r\\n//    string and casts it to a desired format. If left out the string is just\\r\\n//    returned\\r\\n// fCompareFunction : function ( n1 : T, n2 : T ) : Number - A normal JS sort\\r\\n//    compare function. Takes two values and compares them. If left out less than,\\r\\n//    <, compare is used\\r\\n// fGetRowValue : function( oRow : HTMLTRElement, nColumn : int ) : T - A function\\r\\n//    that takes the row and the column index and returns the value used to compare.\\r\\n//    If left out then the innerText is first taken for the cell and then the\\r\\n//    fGetValueFromString is used to convert that string the desired value and type\\r\\n\\r\\nSortableTable.prototype.addSortType = function (sType, fGetValueFromString, fCompareFunction, fGetRowValue) {\\r\\n\\tthis._sortTypeInfo[sType] = {\\r\\n\\t\\ttype:\\t\\t\\t\\tsType,\\r\\n\\t\\tgetValueFromString:\\tfGetValueFromString || SortableTable.idFunction,\\r\\n\\t\\tcompare:\\t\\t\\tfCompareFunction || SortableTable.basicCompare,\\r\\n\\t\\tgetRowValue:\\t\\tfGetRowValue\\r\\n\\t};\\r\\n};\\r\\n\\r\\n// this removes the sort type from all instances of SortableTable\\r\\nSortableTable.prototype.removeSortType = function (sType) {\\r\\n\\tdelete this._sortTypeInfo[sType];\\r\\n};\\r\\n\\r\\nSortableTable.basicCompare = function compare(n1, n2) {\\r\\n\\tif (n1.value < n2.value)\\r\\n\\t\\treturn -1;\\r\\n\\tif (n2.value < n1.value)\\r\\n\\t\\treturn 1;\\r\\n\\treturn 0;\\r\\n};\\r\\n\\r\\nSortableTable.idFunction = function (x) {\\r\\n\\treturn x;\\r\\n};\\r\\n\\r\\nSortableTable.toUpperCase = function (s) {\\r\\n\\treturn s.toUpperCase();\\r\\n};\\r\\n\\r\\nSortableTable.toDate = function (s) {\\r\\n\\tvar parts = s.split(\\\"-\\\");\\r\\n\\tvar d = new Date(0);\\r\\n\\td.setFullYear(parts[0]);\\r\\n\\td.setDate(parts[2]);\\r\\n\\td.setMonth(parts[1] - 1);\\r\\n\\treturn d.valueOf();\\r\\n};\\r\\n\\r\\n\\r\\n// add sort types\\r\\nSortableTable.prototype.addSortType(\\\"Number\\\", Number);\\r\\nSortableTable.prototype.addSortType(\\\"CaseInsensitiveString\\\", SortableTable.toUpperCase);\\r\\nSortableTable.prototype.addSortType(\\\"Date\\\", SortableTable.toDate);\\r\\nSortableTable.prototype.addSortType(\\\"String\\\");\\r\\n// None is a special case\\r\\n\"","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(src) {\n\tfunction log(error) {\n\t\t(typeof console !== \"undefined\")\n\t\t&& (console.error || console.log)(\"[Script Loader]\", error);\n\t}\n\n\t// Check for IE =< 8\n\tfunction isIE() {\n\t\treturn typeof attachEvent !== \"undefined\" && typeof addEventListener === \"undefined\";\n\t}\n\n\ttry {\n\t\tif (typeof execScript !== \"undefined\" && isIE()) {\n\t\t\texecScript(src);\n\t\t} else if (typeof eval !== \"undefined\") {\n\t\t\teval.call(null, src);\n\t\t} else {\n\t\t\tlog(\"EvalError: No eval function available\");\n\t\t}\n\t} catch (error) {\n\t\tlog(error);\n\t}\n}\n","require(\"!!C:\\\\Users\\\\max.guglielmi\\\\Documents\\\\dev\\\\perso\\\\javascript\\\\GitHub\\\\TableFilter\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!C:\\\\Users\\\\max.guglielmi\\\\Documents\\\\dev\\\\perso\\\\javascript\\\\GitHub\\\\TableFilter\\\\node_modules\\\\raw-loader\\\\index.js!C:\\\\Users\\\\max.guglielmi\\\\Documents\\\\dev\\\\perso\\\\javascript\\\\GitHub\\\\TableFilter\\\\libs\\\\sortabletable.js\"))","\nmodule.exports = formatter;\nmodule.exports.default = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n"],"sourceRoot":""}